
static{
	System.debug("BAL");
}

/*
static
{
	xy yu = 34;
   C c = new C(4,"df");
   if(c == null){
   		c = null;
   }
   int i;
   i = (int)c;
   
   C d = (C)i;
}

class C{
	C(int i, text t){}
	
	C getC(){
		return null;
	}
	
	text foo(){
		return "dsf";
	}
}


@KeepAfterForeach
public class LinkedList<T extends Object>{
	
	LinkedListElement<T> head;
	private int size = 0;
	
	public LinkedList(){
		head = new LinkedListElement<T>(null);
		head.next = head.prev = head;
	}
	
	@StringCall
	@Inline
	public LinkedListIterator<T> getIterator(){
		return new LinkedListIterator<T>(this);
	}
	
	@Inline
	public int size(){
		return size;
	}
	
	public T getFirst(){
		if(size == 0) return null;
		return head.next.content;
	}
	
	public void add(T toAdd){
		LinkedListElement<T> elem = new LinkedListElement<T>(toAdd);
		head.prev.next = elem;
		elem.prev = head.prev;
		head.prev = elem;
		elem.next = head;
	}
}

public class LinkedListIterator<T extends Object>{
	
	private LinkedListElement<T> head;
	private LinkedListElement<T> cur;
	public LinkedListIterator(LinkedList<T> list){
		this.head = list.head;
		cur = list.head.next;
	}
	
	public bool hasNext(){
		return cur != head;
	}
	
	public T next(){
		T result = cur.content;
		cur = cur.next;
		return result;
	}
	
	
	
}

class LinkedListElement<T extends Object>{
	T content;
	LinkedListElement<T> next;
	LinkedListElement<T> prev;
	
	public LinkedListElement(T content){
		this.content = content;
	}
}

static{
	LinkedList<Class> bla = new LinkedList<Class>();
	Class c= bla.getFirst();
}
*/