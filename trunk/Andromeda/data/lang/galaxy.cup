package com.sc2mod.andromeda.parser.cup;

import com.sc2mod.andromeda.syntaxNodes.*;
import com.sc2mod.andromeda.parsing.framework.ConstantProvider;

/**
 * Andromeda language grammar
 */

parser code  {: 
:};

terminal Type BOOLEAN; // primitiveType
terminal Type BYTE, INT; // integralType
terminal LBRACK, RBRACK; // arrayType
terminal DOT; // qualifiedName
terminal SEMICOLON, MULT, COMMA, LBRACE, RBRACE, EQ, LPAREN, RPAREN;
terminal STATIC; // modifier
terminal NATIVE;
terminal VOID; // methodHeader
terminal IF, ELSE; // ifThenStatement, ifThenElseStatement
terminal DO, WHILE; // whileStatement, doWhileStatement
terminal BREAK; // breakStatement
terminal CONTINUE; // continueStatement
terminal RETURN; // returnStatement
terminal PLUS, MINUS, COMP, NOT, DIV, MOD;
terminal LSHIFT, RSHIFT; // shiftExpression
terminal LT, GT, LTEQ, GTEQ; // relationalExpression
terminal EQEQ, NOTEQ; // equalityExpression
terminal AND; // andExpression
terminal XOR; // exclusiveOrExpression
terminal OR;  // inclusiveOrExpression
terminal ANDAND; // conditionalAndExpression
terminal OROR; // conditionalOrExpression
terminal MULTEQ, DIVEQ, MODEQ, PLUSEQ, MINUSEQ; // assignmentOperator
terminal LSHIFTEQ, RSHIFTEQ; // assignmentOperator
terminal ANDEQ, XOREQ, OREQ; // assignmentOperator

terminal java.lang.Integer INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.Boolean BOOLEAN_LITERAL;
//terminal java.lang.Character CHARACTER_LITERAL;
terminal java.lang.String STRING_LITERAL;
terminal java.lang.String IDENTIFIER; // name
terminal NULL_LITERAL;
terminal FIXED;
terminal TYPEDEF;
terminal CONST;
terminal STRUCT;
terminal INCLUDE;

non terminal goal;
non terminal SourceFileNode sourceFile;
non terminal GlobalStructureNode globalStructure;
non terminal GlobalVarDeclNode globalVarDeclaration;
non terminal GlobalFuncDeclNode functionDeclaration;

non terminal LiteralNode literal;

non terminal TypeNode type;
non terminal TypeNode primitiveType, numericType;
non terminal TypeNode integralType, floatingPointType;
non terminal TypeNode referenceType;
non terminal TypeNode classOrInterfaceType, classOrInterfaceTypeNonGeneric;
non terminal TypeNode classType, interfaceType;
non terminal ArrayTypeNode arrayType;
non terminal TypeNode pointerType;

non terminal ExprNode name;
non terminal NameExprNode simpleName;
non terminal FieldAccessExprNode qualifiedName;

non terminal compilationUnit;
non terminal PackageDeclNode packageDeclarationOpt;
non terminal IncludeNode includeDeclaration;
non terminal GlobalStructureNode typeDeclaration;

non terminal ModifierListNode modifiersOpt;
non terminal ModifierListNode modifiers;
non terminal ModifierSE modifier;

non terminal FieldDeclNode fieldDeclaration;
non terminal VarDeclListNode variableDeclarators;
non terminal VarDeclNode variableDeclarator;
non terminal IdentifierNode variableDeclaratorId;
non terminal variableInitializer;

non terminal MethodDeclNode methodDeclaration;
non terminal MethodHeaderNode methodHeader;
non terminal MethodDeclaratorTransNode methodDeclarator;
non terminal ParameterListNode formalParameterListOpt, formalParameterList;
non terminal ParameterNode formalParameter;
non terminal StmtNode methodBody;

non terminal MemberDeclNode constantDeclaration;
non terminal MemberDeclNode abstractMethodDeclaration;

non terminal VarInitializerListNode variableInitializers;


non terminal StmtNode block;
non terminal StmtListNode blockStatementsOpt, blockStatements;
non terminal StmtNode blockStatement;
non terminal StmtNode localVariableDeclarationStatement;
non terminal LocalVarDeclNode localVariableDeclaration;
non terminal StmtNode statement, statementNoShortIf;
non terminal StmtNode statementWithoutTrailingSubstatement;
non terminal StmtNode emptyStatement;
non terminal StmtNode expressionStatement;
non terminal ExprNode statementExpression;
non terminal StmtNode ifThenStatement;
non terminal StmtNode ifThenElseStatement, ifThenElseStatementNoShortIf;
non terminal StmtNode whileStatement, whileStatementNoShortIf;
non terminal StmtNode doWhileStatement;
non terminal java.lang.String identifierOpt;
non terminal StmtNode breakStatement, continueStatement;
non terminal StmtNode returnStatement;

non terminal ExprNode primary, primaryNoNewArray;
non terminal ExprNode classInstanceCreationExpression;
non terminal ExprListNode argumentListOpt, argumentList;
non terminal ExprNode arrayCreationExpression;
non terminal ExprListNode dimExprs;
non terminal ExprNode dimExpr;
non terminal FieldAccessExprNode fieldAccess;
non terminal ExprNode methodInvocation;
non terminal ArrayAccessExprNode arrayAccess;
non terminal ExprNode postfixExpression;
non terminal ExprNode unaryExpression, unaryExpressionNotPlusMinus;
non terminal ExprNode castExpression;
non terminal ExprNode multiplicativeExpression, additiveExpression;
non terminal ExprNode shiftExpression, relationalExpression, instanceofExpression, equalityExpression;
non terminal ExprNode andExpression, exclusiveOrExpression, inclusiveOrExpression;
non terminal ExprNode conditionalAndExpression, conditionalOrExpression;
non terminal ExprNode conditionalExpression, assignmentExpression;
non terminal ExprNode assignment;


non terminal AssignOpSE assignmentOperator;
non terminal ExprNode expressionOpt, expression;
non terminal constantExpression;

non terminal GlobalStructureNode structDeclaration;
non terminal MemberDeclListNode structBody;
non terminal ExprNode dereferenceExpression;

non terminal GlobalStructureListNode fileContent;


//typedef and extension
non terminal GlobalStructureNode typeDefinition;


start with goal;


goal ::=	sourceFile:a {: RESULT = a; :}
	;
	
sourceFile ::=
	packageDeclarationOpt:p fileContent:c {: RESULT = new SourceFileNode(p,null,c); RESULT.setPos(cleft,cright); :}
	;

fileContent ::= 
				{: RESULT = new GlobalStructureListNode(); :}
			| fileContent:a globalStructure:g {: a.add(g); RESULT = a;  RESULT.setPos(aleft,gright); :}
			;
			
globalStructure ::= typeDeclaration:f {: RESULT = f; :}
	|	globalVarDeclaration:f {: RESULT = f; :}
	|	functionDeclaration:f {: RESULT = f; :}
	|	typeDefinition:f {: RESULT = f; :}
	|   includeDeclaration:f {: RESULT = f; :}
	;


globalVarDeclaration ::= fieldDeclaration:f {: RESULT = new GlobalVarDeclNode(f); RESULT.setPos(f.getLeftPos(),fright); :}
		;
	

functionDeclaration ::=	methodDeclaration:m {: RESULT = new GlobalFuncDeclNode(m); RESULT.setPos(m.getLeftPos(),mright); ParserHelper.transformFunctionModifiers(m.getHeader().getModifiers()); :}
			;
	


					literal ::=	INTEGER_LITERAL:i {: RESULT = new LiteralNode(ConstantProvider.getIntObject(i),LiteralTypeSE.INT); RESULT.setPos(ileft,iright); :}
						|	FLOATING_POINT_LITERAL:i {: RESULT = new LiteralNode(ConstantProvider.getFixedObject(i),LiteralTypeSE.FLOAT); RESULT.setPos(ileft,iright); :}
						|	BOOLEAN_LITERAL:i {: RESULT = new LiteralNode(ConstantProvider.getBoolObject(i),LiteralTypeSE.BOOL); RESULT.setPos(ileft,iright); :}
//						|	CHARACTER_LITERAL:i {: RESULT = new LiteralNode(ConstantProvider.getCharObject(i),LiteralTypeSE.CHAR); RESULT.setPos(ileft,iright); :}
						|	STRING_LITERAL:i {: RESULT = new LiteralNode(ConstantProvider.getStringObject(i),LiteralTypeSE.STRING); RESULT.setPos(ileft,iright); :}
						|	NULL_LITERAL:i {: RESULT = new LiteralNode(ConstantProvider.getNullObject(),LiteralTypeSE.NULL); RESULT.setPos(ileft,iright); :}
						;
	
	

					type	::=	primitiveType:t {: RESULT = t; :}
						|	referenceType:t {: RESULT = t; :}
//						|	pointerType: t {: RESULT = t; :}
						;
					primitiveType ::=
							numericType:t {: RESULT = t; :}
						|	BOOLEAN:l {: RESULT = new BasicTypeNode("bool"); RESULT.setPos(lleft,lright);:}
						;
					numericType::=	integralType:t {: RESULT = t; :}
						|	floatingPointType:t {: RESULT = t; :}
						;
					integralType ::= 
							BYTE:l {: RESULT = new BasicTypeNode("byte"); RESULT.setPos(lleft,lright);  :}
						|	INT:l {: RESULT = new BasicTypeNode("int"); RESULT.setPos(lleft,lright);  :}
						;
					floatingPointType ::= 
							FIXED:l {: RESULT = new BasicTypeNode("fixed"); RESULT.setPos(lleft,lright);  :} 
						;
					referenceType ::=
							classOrInterfaceType:t {: RESULT = t; :}
						|	arrayType:t {: RESULT = t; :}
						;
						
					classOrInterfaceType ::= name:t {: RESULT = ParserHelper.getExpressionType(t, null); :}
						;
						
					classType ::=	classOrInterfaceType:t {: RESULT = t; :};
					interfaceType ::= classOrInterfaceType:t {: RESULT = t; :};		

					arrayType ::= primitiveType:t dimExprs:r {: RESULT = new ArrayTypeNode(t,r); RESULT.setPos(tleft,rright); :}
						|	name:n dimExprs:r {: RESULT = new ArrayTypeNode(ParserHelper.getExpressionType(n,null),r); RESULT.setPos(nleft,rright); :}
						;

					pointerType ::= type:t MULT:r {: RESULT = new PointerTypeNode(t); RESULT.setPos(tleft,rright); :}
						;
						

// Names
					name	::=	simpleName:n {: RESULT = n; :}
						|	qualifiedName:n {: RESULT = n; :}
						;
					simpleName ::=	IDENTIFIER:i {: RESULT = new NameExprNode(i); RESULT.setPos(ileft,iright); :}
						;
					qualifiedName ::=
							name:p DOT IDENTIFIER:i {: RESULT = new FieldAccessExprNode(p,i); RESULT.setPos(pleft,iright); :}
						|	primitiveType:p DOT IDENTIFIER:i {: FieldAccessExprNode prefix = new FieldAccessExprNode(null,p.getName()); prefix.setPos(pleft,pright); RESULT = new FieldAccessExprNode(prefix,i); RESULT.setPos(pleft,iright);  :}
						;

//Packages

packageDeclarationOpt ::= 
		{: RESULT = null; parser.hook.packageDeclRead(RESULT); :}
	;
	
includeDeclaration ::=
		INCLUDE:l STRING_LITERAL:s {: RESULT = new IncludeNode(s,null); RESULT.setPos(lleft,sright); parser.hook.includeRead(RESULT); :}
	;
	
	

typeDeclaration ::=
		structDeclaration:d {: RESULT = d; :}
	;


modifiersOpt::=
		{: RESULT = new ModifierListNode(); RESULT.setPos(-1,-1); :}
	|	modifiers:m {: RESULT = m; :}
	;
modifiers ::= 	modifier:m {: RESULT = new ModifierListNode(m); RESULT.setPos(mleft,mright); :}
	|	modifiers:m modifier:m2 {: m.add(m2); RESULT = m; RESULT.setPos(mleft,m2right); :}
	;
modifier ::=	
	  STATIC {: RESULT = (ModifierSE.STATIC);:}
	| NATIVE {: RESULT = (ModifierSE.NATIVE);:}
	| CONST {: RESULT = (ModifierSE.CONST); :}
	;



// Typedef
typeDefinition	::= TYPEDEF:l type:t IDENTIFIER:i SEMICOLON:r {:RESULT = new TypeAliasDeclNode(null,null,i,t); RESULT.setPos(lleft,rright); :}
		;

//structs
structDeclaration ::=
	STRUCT:l IDENTIFIER:i LBRACE structBody:b RBRACE:r {: RESULT = new StructDeclNode(null,new ModifierListNode(),i,null,b); RESULT.setPos(lleft,rright); :}
|	STRUCT:l IDENTIFIER:i LBRACE structBody:b RBRACE SEMICOLON:r {: RESULT = new StructDeclNode(null,new ModifierListNode(),i,null,b); RESULT.setPos(lleft,rright); :}

	;
	
structBody ::= fieldDeclaration:d {: RESULT = new MemberDeclListNode(d); RESULT.setPos(d.getLeftPos(),dright);:}
	| structBody:l fieldDeclaration:d {: l.add(d); RESULT = l; RESULT.setPos(lleft,dright); :}
	;



//Field Declarations
				fieldDeclaration ::= 
						modifiersOpt:l type:t variableDeclarators:d SEMICOLON:r {: RESULT = new FieldDeclNode(null,l,t,d,null); RESULT.setPos(l,tleft,rright); :}
					;
				variableDeclarators ::=
						variableDeclarator:i {: RESULT = new VarDeclListNode(i); RESULT.setPos(ileft,iright);:}
					|	variableDeclarators:v COMMA variableDeclarator:i {: v.add(i); RESULT = v; RESULT.setPos(vleft,iright);:}
					;
				variableDeclarator ::=
						variableDeclaratorId:i {: RESULT = new UninitedVarDeclNode(i); RESULT.setPos(ileft,iright);:}
					|	variableDeclaratorId:i EQ expression:j {: RESULT = new VarAssignDeclNode(i,j); RESULT.setPos(ileft,jright); :}
					;
				variableDeclaratorId ::=
						IDENTIFIER:i {: RESULT = new IdentifierNode(i); RESULT.setPos(ileft,iright); :}
					;

// Method Declarations
				methodDeclaration ::=
						methodHeader:h methodBody:b {: RESULT = new MethodDeclNode(MethodTypeSE.METHOD,h,b); RESULT.setPos(h.getLeftPos(),bright); :}
					;
				methodHeader ::=
						modifiersOpt:m type:t methodDeclarator:d {: RESULT = new MethodHeaderNode(null,m,t,d.getName(),d.getParameters(),null); RESULT.setPos(m,tleft,dright); :}
					|	modifiersOpt:m VOID:t methodDeclarator:d {: RESULT = new MethodHeaderNode(null,m,new BasicTypeNode("void"),d.getName(),d.getParameters(),null); RESULT.setPos(m,tleft,dright); :}
					;
				methodDeclarator ::=
						IDENTIFIER:i LPAREN formalParameterListOpt:p RPAREN:r {: RESULT = new MethodDeclaratorTransNode(i,p); RESULT.setPos(ileft,rright);  :}
					;
				formalParameterListOpt ::= {: RESULT = new ParameterListNode(); :}
					|	formalParameterList:l {: RESULT = l; :}
					;
				formalParameterList ::=
						formalParameter:p {: RESULT = new ParameterListNode(p); RESULT.setPos(pleft,pright); :}
					|	formalParameterList:l COMMA formalParameter:p {: l.add(p); RESULT = l; RESULT.setPos(lleft,pright);  :}
					;
				formalParameter ::=
						type:t variableDeclaratorId:d {: RESULT = new ParameterNode(t,d); RESULT.setPos(tleft,dright); :}
					;
				methodBody ::=	block:s {: RESULT = s; :}
					|	SEMICOLON {: RESULT = null; :}
					;

constantDeclaration ::=
		fieldDeclaration:f {: RESULT = f; :}
	;
abstractMethodDeclaration ::=
		methodHeader:h SEMICOLON:r {: RESULT = new MethodDeclNode(MethodTypeSE.METHOD,h,null);  RESULT.setPos(hleft,rright); :}
	;

// Arrays

					variableInitializers ::=
							variableInitializer:i {: RESULT = new VarInitializerListNode(i); RESULT.setPos(ileft,iright); :} 
						;
						
					variableInitializer ::=
							expression:e {: RESULT = e;:} 
						;

// Blocks and Statements
					block ::=	LBRACE:l blockStatementsOpt:b RBRACE:r {: RESULT = new BlockStmtNode(b); RESULT.setPos(lleft,rright); :}
						; 
					blockStatementsOpt ::= {: RESULT = new StmtListNode();:}
						|	blockStatements:l {: RESULT = l;:}
						;
					blockStatements ::=
							blockStatement:s {: RESULT = new StmtListNode(s); RESULT.setPos(sleft,sright);:}
						|	blockStatements:l blockStatement:s {: l.add(s); RESULT = l; RESULT.setPos(lleft,sright); :}
						;
					blockStatement ::=
							localVariableDeclarationStatement:s {: RESULT = s; :}
						|	statement:s {: RESULT = s; :}
						;
					localVariableDeclarationStatement ::=
							localVariableDeclaration:l SEMICOLON:r {: RESULT = new LocalVarDeclStmtNode(l); RESULT.setPos(lleft,rright); :}
						;
					localVariableDeclaration ::=
							type:t variableDeclarators:d {: RESULT = new LocalVarDeclNode(null,t,d); RESULT.setPos(tleft,dright); :}
						|	CONST:l type:t variableDeclarators:d {: RESULT = new LocalVarDeclNode((ModifierListNode)new ModifierListNode(ModifierSE.CONST).setPos(lleft,lright),t,d); RESULT.setPos(lleft,dright); :}
						;
					statement ::= statementWithoutTrailingSubstatement:s {: RESULT = s; :}
						|	ifThenStatement:s {: RESULT = s; :}
						|	ifThenElseStatement:s {: RESULT = s; :}
						|	whileStatement:s {: RESULT = s; :}
						;
					statementNoShortIf ::=
							statementWithoutTrailingSubstatement:s {: RESULT = s; :}
						|	ifThenElseStatementNoShortIf:s {: RESULT = s; :}
						|	whileStatementNoShortIf:s {: RESULT = s; :}
						;
					statementWithoutTrailingSubstatement ::=
							block:s {: RESULT = s; :}
						|	emptyStatement:s {: RESULT = s; :}
						|	expressionStatement:s {: RESULT = s; :}
						|	doWhileStatement:s {: RESULT = s; :}
						|	breakStatement:s {: RESULT = s; :}
						|	continueStatement:s {: RESULT = s; :}
						|	returnStatement:s {: RESULT = s; :}
						;
					emptyStatement ::=
							SEMICOLON {: RESULT = new EmptyStmtNode(); :}
						;
					expressionStatement ::=
							statementExpression:e SEMICOLON:r {: RESULT = new ExprStmtNode(e); RESULT.setPos(eleft,rright); :}
						;
					statementExpression ::=
							assignment:e {: RESULT = e; :}
						|	methodInvocation:e {: RESULT = e; :}
						;
					ifThenStatement ::=
							IF:l LPAREN expression:e RPAREN statement:s1 {: RESULT = new IfStmtNode(e,ParserHelper.createBlock(s1),null); RESULT.setPos(lleft,s1right); :}
						;
					ifThenElseStatement ::=
							IF:l LPAREN expression:e RPAREN statementNoShortIf:s1 
								ELSE statement:s2 {: RESULT = new IfStmtNode(e,ParserHelper.createBlock(s1),ParserHelper.createBlock(s2)); RESULT.setPos(lleft,s2right); :}
						;
					ifThenElseStatementNoShortIf ::=
							IF:l LPAREN expression:e RPAREN statementNoShortIf:s1 
								ELSE statementNoShortIf:s2 {: RESULT = new IfStmtNode(e,ParserHelper.createBlock(s1),ParserHelper.createBlock(s2)); RESULT.setPos(lleft,s2right); :}
						;
						

					whileStatement ::=
							WHILE:l LPAREN expression:e RPAREN:r statement:s {: RESULT = new WhileStmtNode(e,ParserHelper.createBlock(s)); RESULT.setPos(lleft,rright); :}
						;
					whileStatementNoShortIf ::=
							WHILE:l LPAREN expression:e RPAREN:r statementNoShortIf:s {: RESULT = new WhileStmtNode(e,ParserHelper.createBlock(s)); RESULT.setPos(lleft,rright); :}
						;
					doWhileStatement ::=
							DO:l statement:s WHILE LPAREN expression:e RPAREN SEMICOLON:r {: RESULT = new DoWhileStmtNode(e,ParserHelper.createBlock(s)); RESULT.setPos(lleft,rright); :}
						;


					identifierOpt ::=  {: RESULT = null; :}
						|	IDENTIFIER:i {: RESULT = i; :}
						;

					breakStatement ::=
							BREAK:l identifierOpt:i SEMICOLON:r  {: RESULT = new BreakStmtNode(i); RESULT.setPos(lleft,rright); :}
						;

					continueStatement ::=
							CONTINUE:l identifierOpt:i SEMICOLON:r  {: RESULT = new ContinueStmtNode(i); RESULT.setPos(lleft,rright); :}
						;
					returnStatement ::=
							RETURN:l expressionOpt:e SEMICOLON:r  {: RESULT = new ReturnStmtNode(e); RESULT.setPos(lleft,rright); :}
						;


// Expressions
					primary ::=	primaryNoNewArray:e {: RESULT = e; :}
						|	arrayAccess:e {: RESULT = e; :}
						;
					primaryNoNewArray ::=
							literal:l {: RESULT = new LiteralExprNode(l); RESULT.setPos(lleft,lright); :}
						|	LPAREN:l expression:e RPAREN:r {: RESULT = new ParenthesisExprNode(e); RESULT.setPos(lleft,rright); :}
						|	fieldAccess:e {: RESULT = e; :}
						|	methodInvocation:e {: RESULT = e; :}
						;
					argumentListOpt ::= {: RESULT = new ExprListNode(); :}
						|	argumentList:a {: RESULT = a; :}
						;
					argumentList ::=
							expression:e {: RESULT = new ExprListNode(e); e.setPos(eleft,eright); :}
						|	argumentList:a COMMA expression:e {: a.add(e); RESULT = a; a.setPos(aleft,eright); :}
						;
					dimExprs ::=	dimExpr:e {: RESULT = (ExprListNode)new ExprListNode(e).setPos(eleft,eright);  :}
						|	dimExprs:l dimExpr:e {: l.add(e); RESULT = l; l.setPos(lleft,eright); :}
						;
					dimExpr ::=	LBRACK:l expression:e RBRACK:r {: RESULT = e; e.setPos(lleft,rright); :}
						;
					fieldAccess ::=
							primary:e DOT IDENTIFIER:i {: RESULT = new FieldAccessExprNode(e,i); RESULT.setPos(eleft,iright); :}
						;
					methodInvocation ::=
							name:n LPAREN argumentListOpt:a RPAREN:r {: ExprNode lexpr = (n instanceof NameExprNode?null:n.getLeftExpression()); RESULT = new MethodInvocationExprNode(lexpr,n.getName(),a,null); RESULT.setPos(nleft,rright); :}
						|	primary:e DOT IDENTIFIER:i LPAREN argumentListOpt:a RPAREN:r {: RESULT = new MethodInvocationExprNode(e,i,a,null); RESULT.setPos(eleft,rright);  :}
						;
					
					arrayAccess ::= 
							arrayType:a {: RESULT = ParserHelper.arrayTypeToAccess(a); :}
						|	primaryNoNewArray:e1 LBRACK expression:e2 RBRACK:r {: RESULT = new ArrayAccessExprNode(e1,e2); RESULT.setPos(e1left,rright); :}
						;
					postfixExpression ::=
							primary:e {: RESULT = e; :}
						|	name:e {: RESULT = e; :}
						;
					unaryExpression ::=
							PLUS:l unaryExpression:e {: RESULT = e; RESULT.setPos(lleft,eright); :}
						|	MINUS:l unaryExpression:e {: RESULT = new UnOpExprNode(e,UnOpSE.MINUS); RESULT.setPos(lleft,eright); :}
						|	AND:l unaryExpression:e {: RESULT = new UnOpExprNode(e,UnOpSE.ADDRESSOF); RESULT.setPos(lleft,eright); :}
						|	dereferenceExpression:e {: RESULT = e; :}
						|	unaryExpressionNotPlusMinus:e {: RESULT = e; :}
						;
					dereferenceExpression ::=
							MULT:l unaryExpression:e {: RESULT = new UnOpExprNode(e,UnOpSE.DEREFERENCE); RESULT.setPos(lleft,eright); :}
						;		
					unaryExpressionNotPlusMinus ::=
							postfixExpression:e {: RESULT = e; :}
						|	COMP:l unaryExpression:e {: RESULT = new UnOpExprNode(e,UnOpSE.COMP); RESULT.setPos(lleft,eright); :}
						|	NOT:l unaryExpression:e {: RESULT = new UnOpExprNode(e,UnOpSE.NOT); RESULT.setPos(lleft,eright); :}
						;
					multiplicativeExpression ::=
							unaryExpression:e {: RESULT = e; :}
						|	multiplicativeExpression:e1 MULT unaryExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.MULT); RESULT.setPos(e1left,e2right); :}
						|	multiplicativeExpression:e1 DIV unaryExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.DIV); RESULT.setPos(e1left,e2right); :}
						|	multiplicativeExpression:e1 MOD unaryExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.MOD); RESULT.setPos(e1left,e2right); :}
						;
					additiveExpression ::=
							multiplicativeExpression:e {: RESULT = e; :}
						|	additiveExpression:e1 PLUS multiplicativeExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.PLUS); RESULT.setPos(e1left,e2right); :}
						|	additiveExpression:e1 MINUS multiplicativeExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.MINUS); RESULT.setPos(e1left,e2right); :}
						;
					shiftExpression ::=
							additiveExpression:e {: RESULT = e; :}
						|	shiftExpression:e1 LSHIFT additiveExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.LSHIFT); RESULT.setPos(e1left,e2right); :}
						|	shiftExpression:e1 RSHIFT additiveExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.RSHIFT); RESULT.setPos(e1left,e2right); :}
						;
					//We need to seperate instanceof here, or we'll get a collision with generic < >
					//TODO Remove
					instanceofExpression ::= 
							relationalExpression:e {: RESULT = e; :}
						;
					relationalExpression ::=
							shiftExpression:e {: RESULT = e; :}
						|	relationalExpression:e1 LT shiftExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.LT); RESULT.setPos(e1left,e2right); :}
						|	relationalExpression:e1 GT shiftExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.GT); RESULT.setPos(e1left,e2right); :}
						|	relationalExpression:e1 LTEQ shiftExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.LTEQ); RESULT.setPos(e1left,e2right); :}
						|	relationalExpression:e1 GTEQ shiftExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.GTEQ); RESULT.setPos(e1left,e2right); :}
						;	
					equalityExpression ::=
							instanceofExpression:e {: RESULT = e; :}
						|	equalityExpression:e1 EQEQ instanceofExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.EQEQ); RESULT.setPos(e1left,e2right); :}
						|	equalityExpression:e1 NOTEQ instanceofExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.NOTEQ); RESULT.setPos(e1left,e2right); :}
						;
					andExpression ::=
							equalityExpression:e {: RESULT = e; :}
						|	andExpression:e1 AND equalityExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.AND); RESULT.setPos(e1left,e2right); :}
						;
					exclusiveOrExpression ::=
							andExpression:e {: RESULT = e; :}
						|	exclusiveOrExpression:e1 XOR andExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.XOR); RESULT.setPos(e1left,e2right); :}
						;
					inclusiveOrExpression ::=
							exclusiveOrExpression:e {: RESULT = e; :}
						|	inclusiveOrExpression:e1 OR exclusiveOrExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.OR); RESULT.setPos(e1left,e2right); :}
						;
					conditionalAndExpression ::=
							inclusiveOrExpression:e {: RESULT = e; :}
						|	conditionalAndExpression:e1 ANDAND inclusiveOrExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.ANDAND); RESULT.setPos(e1left,e2right); :}
						;
					conditionalOrExpression ::=
							conditionalAndExpression:e {: RESULT = e; :}
						|	conditionalOrExpression:e1 OROR conditionalAndExpression:e2 {: RESULT = new BinOpExprNode(e1,e2,BinOpSE.OROR); RESULT.setPos(e1left,e2right); :}
						;
					//TODO Remove
					conditionalExpression ::=
							conditionalOrExpression:e {: RESULT = e; :}
						;
					assignmentExpression ::=
							conditionalExpression:e {: RESULT = e; :}
						|	assignment:e {: RESULT = e; :}
						;
					assignment ::=	name:n assignmentOperator:o assignmentExpression:e2 {: RESULT = new AssignmentExprNode(n,o,e2); RESULT.setPos(nleft,e2right); :}
						| 	fieldAccess:e1 assignmentOperator:o assignmentExpression:e2 {: RESULT = new AssignmentExprNode(e1,o,e2); RESULT.setPos(e1left,e2right); :}
						| 	arrayAccess:e1 assignmentOperator:o assignmentExpression:e2 {: RESULT = new AssignmentExprNode(e1,o,e2); RESULT.setPos(e1left,e2right); :}
						|	dereferenceExpression:e1 assignmentOperator:o assignmentExpression:e2 {: RESULT = new AssignmentExprNode(e1,o,e2); RESULT.setPos(e1left,e2right); :}
						;
					assignmentOperator ::=
							EQ:e {: RESULT = (AssignOpSE.EQ); :}
						|	MULTEQ {: RESULT = (AssignOpSE.MULTEQ); :}
						|	DIVEQ {: RESULT = (AssignOpSE.DIVEQ); :}
						|	MODEQ {: RESULT = (AssignOpSE.MODEQ); :}
						|	PLUSEQ {: RESULT = (AssignOpSE.PLUSEQ); :}
						|	MINUSEQ {: RESULT = (AssignOpSE.MINUSEQ); :}
						|	LSHIFTEQ {: RESULT = (AssignOpSE.LSHIFTEQ); :}
						|	RSHIFTEQ {: RESULT = (AssignOpSE.RSHIFTEQ); :}
						|	ANDEQ {: RESULT = (AssignOpSE.ANDEQ); :}
						|	XOREQ {: RESULT = (AssignOpSE.XOREQ); :}
						|	OREQ {: RESULT = (AssignOpSE.OREQ); :}
						;
					expressionOpt ::=  {: RESULT = null; :}
						|	expression:e {: RESULT = e; :}
						;
					expression ::=	assignmentExpression:e {: RESULT = e; :}
						;
					constantExpression ::=
							expression:e {: RESULT = e; :}
						;
