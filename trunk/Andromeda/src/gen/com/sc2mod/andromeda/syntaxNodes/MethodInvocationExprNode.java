/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

import com.sc2mod.andromeda.notifications.InternalProgramError;
import com.sc2mod.andromeda.environment.SemanticsElement;
import com.sc2mod.andromeda.environment.operations.Invocation;

public class MethodInvocationExprNode extends ExprNode {

  private ExprNode prefix;
  private String funcName;
  private ExprListNode arguments;
  private SpecialInvocationSE special;

  public MethodInvocationExprNode (ExprNode prefix, String funcName, ExprListNode arguments, SpecialInvocationSE special) {
    this.prefix = prefix;
    if (prefix != null) prefix.setParent(this);
    this.funcName = funcName;
    this.arguments = arguments;
    if (arguments != null) arguments.setParent(this);
    this.special = special;
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public ExprNode getPrefix() {
    return prefix;
  }

  public void setPrefix(ExprNode prefix) {
    this.prefix = prefix;
  }

  public String getFuncName() {
    return funcName;
  }

  public void setFuncName(String funcName) {
    this.funcName = funcName;
  }

  public ExprListNode getArguments() {
    return arguments;
  }

  public void setArguments(ExprListNode arguments) {
    this.arguments = arguments;
  }

  public SpecialInvocationSE getSpecial() {
    return special;
  }

  public void setSpecial(SpecialInvocationSE special) {
    this.special = special;
  }

  private Invocation semantics;
  @Override
  public void setSemantics(SemanticsElement semantics){
  	if(!(semantics instanceof Invocation)) throw new InternalProgramError(this,"Trying to assign semantics of type "
  				+ semantics.getClass().getSimpleName() + " to node " + this.getClass().getSimpleName());
  	this.semantics = (Invocation)semantics;
  }
  @Override
  public Invocation getSemantics(){
  	return semantics;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (prefix != null) prefix.accept(visitor);
		if (arguments != null) arguments.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (prefix != null) result$ = visitor.reduce(result$,prefix.accept(visitor,state));
		if (arguments != null) result$ = visitor.reduce(result$,arguments.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (prefix != null) prefix.accept(visitor,state);
		if (arguments != null) arguments.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("MethodInvocationExprNode(\n");
      if (prefix != null)
        buffer.append(prefix.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append("  "+tab+funcName);
    buffer.append("\n");
      if (arguments != null)
        buffer.append(arguments.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append("  "+tab+special);
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [MethodInvocationExprNode]");
    return buffer.toString();
  }
}
