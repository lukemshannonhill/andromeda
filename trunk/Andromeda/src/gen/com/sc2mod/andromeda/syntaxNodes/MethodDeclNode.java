/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

import com.sc2mod.andromeda.notifications.InternalProgramError;
import com.sc2mod.andromeda.environment.SemanticsElement;
import com.sc2mod.andromeda.environment.operations.Function;

public class MethodDeclNode extends MemberDeclNode {

  private MethodTypeSE methodType;
  private MethodHeaderNode header;
  private StmtNode body;

  public MethodDeclNode (MethodTypeSE methodType, MethodHeaderNode header, StmtNode body) {
    this.methodType = methodType;
    this.header = header;
    if (header != null) header.setParent(this);
    this.body = body;
    if (body != null) body.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public MethodTypeSE getMethodType() {
    return methodType;
  }

  public void setMethodType(MethodTypeSE methodType) {
    this.methodType = methodType;
  }

  public MethodHeaderNode getHeader() {
    return header;
  }

  public void setHeader(MethodHeaderNode header) {
    this.header = header;
  }

  public StmtNode getBody() {
    return body;
  }

  public void setBody(StmtNode body) {
    this.body = body;
  }

  private Function semantics;
  @Override
  public void setSemantics(SemanticsElement semantics){
  	if(!(semantics instanceof Function)) throw new InternalProgramError(this,"Trying to assign semantics of type "
  				+ semantics.getClass().getSimpleName() + " to node " + this.getClass().getSimpleName());
  	this.semantics = (Function)semantics;
  }
  @Override
  public Function getSemantics(){
  	return semantics;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (header != null) header.accept(visitor);
		if (body != null) body.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (header != null) result$ = visitor.reduce(result$,header.accept(visitor,state));
		if (body != null) result$ = visitor.reduce(result$,body.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (header != null) header.accept(visitor,state);
		if (body != null) body.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("MethodDeclNode(\n");
    buffer.append("  "+tab+methodType);
    buffer.append("\n");
      if (header != null)
        buffer.append(header.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (body != null)
        buffer.append(body.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [MethodDeclNode]");
    return buffer.toString();
  }
}
