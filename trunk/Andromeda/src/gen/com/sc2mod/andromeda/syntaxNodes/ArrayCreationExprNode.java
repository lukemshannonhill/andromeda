/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

public class ArrayCreationExprNode extends ExprNode {

  private TypeNode type;
  private ExprListNode definedDimensions;
  private int additionalDimensions;
  private ArrayInitNode arrayInitializer;

  public ArrayCreationExprNode (TypeNode type, ExprListNode definedDimensions, int additionalDimensions, ArrayInitNode arrayInitializer) {
    this.type = type;
    if (type != null) type.setParent(this);
    this.definedDimensions = definedDimensions;
    if (definedDimensions != null) definedDimensions.setParent(this);
    this.additionalDimensions = additionalDimensions;
    this.arrayInitializer = arrayInitializer;
    if (arrayInitializer != null) arrayInitializer.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public TypeNode getType() {
    return type;
  }

  public void setType(TypeNode type) {
    this.type = type;
  }

  public ExprListNode getDefinedDimensions() {
    return definedDimensions;
  }

  public void setDefinedDimensions(ExprListNode definedDimensions) {
    this.definedDimensions = definedDimensions;
  }

  public int getAdditionalDimensions() {
    return additionalDimensions;
  }

  public void setAdditionalDimensions(int additionalDimensions) {
    this.additionalDimensions = additionalDimensions;
  }

  public ArrayInitNode getArrayInitializer() {
    return arrayInitializer;
  }

  public void setArrayInitializer(ArrayInitNode arrayInitializer) {
    this.arrayInitializer = arrayInitializer;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (type != null) type.accept(visitor);
		if (definedDimensions != null) definedDimensions.accept(visitor);
		if (arrayInitializer != null) arrayInitializer.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (type != null) result$ = visitor.reduce(result$,type.accept(visitor,state));
		if (definedDimensions != null) result$ = visitor.reduce(result$,definedDimensions.accept(visitor,state));
		if (arrayInitializer != null) result$ = visitor.reduce(result$,arrayInitializer.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (type != null) type.accept(visitor,state);
		if (definedDimensions != null) definedDimensions.accept(visitor,state);
		if (arrayInitializer != null) arrayInitializer.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("ArrayCreationExprNode(\n");
      if (type != null)
        buffer.append(type.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (definedDimensions != null)
        buffer.append(definedDimensions.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append("  "+tab+additionalDimensions);
    buffer.append("\n");
      if (arrayInitializer != null)
        buffer.append(arrayInitializer.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [ArrayCreationExprNode]");
    return buffer.toString();
  }
}
