/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

public class AccessorBodyTransNode extends SyntaxNode {

  private SyntaxNode parent;
  private MethodDeclNode getMethod;
  private MethodDeclNode setMethod;

  public AccessorBodyTransNode (MethodDeclNode getMethod, MethodDeclNode setMethod) {
    this.getMethod = getMethod;
    if (getMethod != null) getMethod.setParent(this);
    this.setMethod = setMethod;
    if (setMethod != null) setMethod.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public MethodDeclNode getGetMethod() {
    return getMethod;
  }

  public void setGetMethod(MethodDeclNode getMethod) {
    this.getMethod = getMethod;
  }

  public MethodDeclNode getSetMethod() {
    return setMethod;
  }

  public void setSetMethod(MethodDeclNode setMethod) {
    this.setMethod = setMethod;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (getMethod != null) getMethod.accept(visitor);
		if (setMethod != null) setMethod.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (getMethod != null) result$ = visitor.reduce(result$,getMethod.accept(visitor,state));
		if (setMethod != null) result$ = visitor.reduce(result$,setMethod.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (getMethod != null) getMethod.accept(visitor,state);
		if (setMethod != null) setMethod.accept(visitor,state);
	}
  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("AccessorBodyTransNode(\n");
      if (getMethod != null)
        buffer.append(getMethod.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (setMethod != null)
        buffer.append(setMethod.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [AccessorBodyTransNode]");
    return buffer.toString();
  }
}
