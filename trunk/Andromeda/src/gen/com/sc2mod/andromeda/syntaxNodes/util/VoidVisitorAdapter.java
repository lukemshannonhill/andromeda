/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes.util;
import com.sc2mod.andromeda.syntaxNodes.*;

public abstract class VoidVisitorAdapter implements VoidVisitor {

  public void visit(GlobalStructureListNode globalStructureListNode) { visitDefault(globalStructureListNode); }
  public void visit(ModifierListNode modifierListNode) { visitDefault(modifierListNode); }
  public void visit(AnnotationListNode annotationListNode) { visitDefault(annotationListNode); }
  public void visit(TypeParamListNode typeParamListNode) { visitDefault(typeParamListNode); }
  public void visit(TypeListNode typeListNode) { visitDefault(typeListNode); }
  public void visit(MemberDeclListNode memberDeclListNode) { visitDefault(memberDeclListNode); }
  public void visit(VarDeclListNode varDeclListNode) { visitDefault(varDeclListNode); }
  public void visit(ParameterListNode parameterListNode) { visitDefault(parameterListNode); }
  public void visit(VarInitializerListNode varInitializerListNode) { visitDefault(varInitializerListNode); }
  public void visit(StmtListNode stmtListNode) { visitDefault(stmtListNode); }
  public void visit(ExprListNode exprListNode) { visitDefault(exprListNode); }
  public void visit(IdentifierNode identifierNode) { visitDefault(identifierNode); }
  public void visit(SourceFileNode sourceFileNode) { visitDefault(sourceFileNode); }
  public void visit(PackageDeclNode packageDeclNode) { visitDefault(packageDeclNode); }
  public void visit(LiteralNode literalNode) { visitDefault(literalNode); }
  public void visit(AnnotationNode annotationNode) { visitDefault(annotationNode); }
  public void visit(TypeParamNode typeParamNode) { visitDefault(typeParamNode); }
  public void visit(AccessorBodyTransNode accessorBodyTransNode) { visitDefault(accessorBodyTransNode); }
  public void visit(MethodHeaderNode methodHeaderNode) { visitDefault(methodHeaderNode); }
  public void visit(MethodDeclaratorTransNode methodDeclaratorTransNode) { visitDefault(methodDeclaratorTransNode); }
  public void visit(ParameterNode parameterNode) { visitDefault(parameterNode); }
  public void visit(ArrayInitNode arrayInitNode) { visitDefault(arrayInitNode); }
  public void visit(LocalVarDeclNode localVarDeclNode) { visitDefault(localVarDeclNode); }
  public void visit(ArrayDimensionsNode arrayDimensionsNode) { visitDefault(arrayDimensionsNode); }
  public void visit(GlobalStructureNode globalStructureNode) { visitDefault(globalStructureNode); }
  public void visit(ClassDeclNode classDeclNode) { visitDefault(classDeclNode); }
  public void visit(EnrichDeclNode enrichDeclNode) { visitDefault(enrichDeclNode); }
  public void visit(GlobalFuncDeclNode globalFuncDeclNode) { visitDefault(globalFuncDeclNode); }
  public void visit(GlobalVarDeclNode globalVarDeclNode) { visitDefault(globalVarDeclNode); }
  public void visit(GlobalStaticInitDeclNode globalStaticInitDeclNode) { visitDefault(globalStaticInitDeclNode); }
  public void visit(InterfaceDeclNode interfaceDeclNode) { visitDefault(interfaceDeclNode); }
  public void visit(StructDeclNode structDeclNode) { visitDefault(structDeclNode); }
  public void visit(IncludeNode includeNode) { visitDefault(includeNode); }
  public void visit(TypeAliasDeclNode typeAliasDeclNode) { visitDefault(typeAliasDeclNode); }
  public void visit(TypeExtensionDeclNode typeExtensionDeclNode) { visitDefault(typeExtensionDeclNode); }
  public void visit(InstanceLimitSetterNode instanceLimitSetterNode) { visitDefault(instanceLimitSetterNode); }
  public void visit(TypeNode typeNode) { visitDefault(typeNode); }
  public void visit(BasicTypeNode basicTypeNode) { visitDefault(basicTypeNode); }
  public void visit(SimpleTypeNode simpleTypeNode) { visitDefault(simpleTypeNode); }
  public void visit(QualifiedTypeNode qualifiedTypeNode) { visitDefault(qualifiedTypeNode); }
  public void visit(ArrayTypeNode arrayTypeNode) { visitDefault(arrayTypeNode); }
  public void visit(PointerTypeNode pointerTypeNode) { visitDefault(pointerTypeNode); }
  public void visit(FuncPointerTypeNode funcPointerTypeNode) { visitDefault(funcPointerTypeNode); }
  public void visit(MemberDeclNode memberDeclNode) { visitDefault(memberDeclNode); }
  public void visit(MethodDeclNode methodDeclNode) { visitDefault(methodDeclNode); }
  public void visit(FieldDeclNode fieldDeclNode) { visitDefault(fieldDeclNode); }
  public void visit(StaticInitDeclNode staticInitDeclNode) { visitDefault(staticInitDeclNode); }
  public void visit(AccessorDeclNode accessorDeclNode) { visitDefault(accessorDeclNode); }
  public void visit(VarDeclNode varDeclNode) { visitDefault(varDeclNode); }
  public void visit(UninitedVarDeclNode uninitedVarDeclNode) { visitDefault(uninitedVarDeclNode); }
  public void visit(VarAssignDeclNode varAssignDeclNode) { visitDefault(varAssignDeclNode); }
  public void visit(VarArrayInitDeclNode varArrayInitDeclNode) { visitDefault(varArrayInitDeclNode); }
  public void visit(StmtNode stmtNode) { visitDefault(stmtNode); }
  public void visit(BlockStmtNode blockStmtNode) { visitDefault(blockStmtNode); }
  public void visit(ExprStmtNode exprStmtNode) { visitDefault(exprStmtNode); }
  public void visit(LocalTypeDeclStmtNode localTypeDeclStmtNode) { visitDefault(localTypeDeclStmtNode); }
  public void visit(LocalVarDeclStmtNode localVarDeclStmtNode) { visitDefault(localVarDeclStmtNode); }
  public void visit(IfStmtNode ifStmtNode) { visitDefault(ifStmtNode); }
  public void visit(WhileStmtNode whileStmtNode) { visitDefault(whileStmtNode); }
  public void visit(DoWhileStmtNode doWhileStmtNode) { visitDefault(doWhileStmtNode); }
  public void visit(ForStmtNode forStmtNode) { visitDefault(forStmtNode); }
  public void visit(ForCountStmtNode forCountStmtNode) { visitDefault(forCountStmtNode); }
  public void visit(ForEachStmtNode forEachStmtNode) { visitDefault(forEachStmtNode); }
  public void visit(BreakStmtNode breakStmtNode) { visitDefault(breakStmtNode); }
  public void visit(ContinueStmtNode continueStmtNode) { visitDefault(continueStmtNode); }
  public void visit(ReturnStmtNode returnStmtNode) { visitDefault(returnStmtNode); }
  public void visit(DeleteStmtNode deleteStmtNode) { visitDefault(deleteStmtNode); }
  public void visit(ThrowStmtNode throwStmtNode) { visitDefault(throwStmtNode); }
  public void visit(ExplicitConsCallStmtNode explicitConsCallStmtNode) { visitDefault(explicitConsCallStmtNode); }
  public void visit(EmptyStmtNode emptyStmtNode) { visitDefault(emptyStmtNode); }
  public void visit(ExprNode exprNode) { visitDefault(exprNode); }
  public void visit(AssignmentExprNode assignmentExprNode) { visitDefault(assignmentExprNode); }
  public void visit(NameExprNode nameExprNode) { visitDefault(nameExprNode); }
  public void visit(FieldAccessExprNode fieldAccessExprNode) { visitDefault(fieldAccessExprNode); }
  public void visit(ArrayAccessExprNode arrayAccessExprNode) { visitDefault(arrayAccessExprNode); }
  public void visit(ConditionalExprNode conditionalExprNode) { visitDefault(conditionalExprNode); }
  public void visit(BinOpExprNode binOpExprNode) { visitDefault(binOpExprNode); }
  public void visit(UnOpExprNode unOpExprNode) { visitDefault(unOpExprNode); }
  public void visit(InstanceofExprNode instanceofExprNode) { visitDefault(instanceofExprNode); }
  public void visit(CastExprNode castExprNode) { visitDefault(castExprNode); }
  public void visit(SuperExprNode superExprNode) { visitDefault(superExprNode); }
  public void visit(ThisExprNode thisExprNode) { visitDefault(thisExprNode); }
  public void visit(MethodInvocationExprNode methodInvocationExprNode) { visitDefault(methodInvocationExprNode); }
  public void visit(ArrayCreationExprNode arrayCreationExprNode) { visitDefault(arrayCreationExprNode); }
  public void visit(NewExprNode newExprNode) { visitDefault(newExprNode); }
  public void visit(LiteralExprNode literalExprNode) { visitDefault(literalExprNode); }
  public void visit(MetaClassExprNode metaClassExprNode) { visitDefault(metaClassExprNode); }
  public void visit(ParenthesisExprNode parenthesisExprNode) { visitDefault(parenthesisExprNode); }
  public void visit(KeyOfExprNode keyOfExprNode) { visitDefault(keyOfExprNode); }

  public void visitDefault(SyntaxNode s) { }

}
