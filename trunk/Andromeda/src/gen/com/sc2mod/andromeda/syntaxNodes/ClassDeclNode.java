/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

import com.sc2mod.andromeda.notifications.InternalProgramError;
import com.sc2mod.andromeda.environment.SemanticsElement;
import com.sc2mod.andromeda.environment.types.Class;

public class ClassDeclNode extends GlobalStructureNode {

  private AnnotationListNode annotations;
  private ModifierListNode modifiers;
  private String name;
  private ExprNode instanceLimit;
  private TypeNode superClass;
  private TypeListNode interfaces;
  private MemberDeclListNode body;
  private TypeParamListNode typeParams;

  public ClassDeclNode (AnnotationListNode annotations, ModifierListNode modifiers, String name, ExprNode instanceLimit, TypeNode superClass, TypeListNode interfaces, MemberDeclListNode body, TypeParamListNode typeParams) {
    this.annotations = annotations;
    if (annotations != null) annotations.setParent(this);
    this.modifiers = modifiers;
    if (modifiers != null) modifiers.setParent(this);
    this.name = name;
    this.instanceLimit = instanceLimit;
    if (instanceLimit != null) instanceLimit.setParent(this);
    this.superClass = superClass;
    if (superClass != null) superClass.setParent(this);
    this.interfaces = interfaces;
    if (interfaces != null) interfaces.setParent(this);
    this.body = body;
    if (body != null) body.setParent(this);
    this.typeParams = typeParams;
    if (typeParams != null) typeParams.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public AnnotationListNode getAnnotations() {
    return annotations;
  }

  public void setAnnotations(AnnotationListNode annotations) {
    this.annotations = annotations;
  }

  public ModifierListNode getModifiers() {
    return modifiers;
  }

  public void setModifiers(ModifierListNode modifiers) {
    this.modifiers = modifiers;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ExprNode getInstanceLimit() {
    return instanceLimit;
  }

  public void setInstanceLimit(ExprNode instanceLimit) {
    this.instanceLimit = instanceLimit;
  }

  public TypeNode getSuperClass() {
    return superClass;
  }

  public void setSuperClass(TypeNode superClass) {
    this.superClass = superClass;
  }

  public TypeListNode getInterfaces() {
    return interfaces;
  }

  public void setInterfaces(TypeListNode interfaces) {
    this.interfaces = interfaces;
  }

  public MemberDeclListNode getBody() {
    return body;
  }

  public void setBody(MemberDeclListNode body) {
    this.body = body;
  }

  public TypeParamListNode getTypeParams() {
    return typeParams;
  }

  public void setTypeParams(TypeParamListNode typeParams) {
    this.typeParams = typeParams;
  }

  private Class semantics;
  @Override
  public void setSemantics(SemanticsElement semantics){
  	if(!(semantics instanceof Class)) throw new InternalProgramError(this,"Trying to assign semantics of type "
  				+ semantics.getClass().getSimpleName() + " to node " + this.getClass().getSimpleName());
  	this.semantics = (Class)semantics;
  }
  @Override
  public Class getSemantics(){
  	return semantics;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (annotations != null) annotations.accept(visitor);
		if (modifiers != null) modifiers.accept(visitor);
		if (instanceLimit != null) instanceLimit.accept(visitor);
		if (superClass != null) superClass.accept(visitor);
		if (interfaces != null) interfaces.accept(visitor);
		if (body != null) body.accept(visitor);
		if (typeParams != null) typeParams.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (annotations != null) result$ = visitor.reduce(result$,annotations.accept(visitor,state));
		if (modifiers != null) result$ = visitor.reduce(result$,modifiers.accept(visitor,state));
		if (instanceLimit != null) result$ = visitor.reduce(result$,instanceLimit.accept(visitor,state));
		if (superClass != null) result$ = visitor.reduce(result$,superClass.accept(visitor,state));
		if (interfaces != null) result$ = visitor.reduce(result$,interfaces.accept(visitor,state));
		if (body != null) result$ = visitor.reduce(result$,body.accept(visitor,state));
		if (typeParams != null) result$ = visitor.reduce(result$,typeParams.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (annotations != null) annotations.accept(visitor,state);
		if (modifiers != null) modifiers.accept(visitor,state);
		if (instanceLimit != null) instanceLimit.accept(visitor,state);
		if (superClass != null) superClass.accept(visitor,state);
		if (interfaces != null) interfaces.accept(visitor,state);
		if (body != null) body.accept(visitor,state);
		if (typeParams != null) typeParams.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("ClassDeclNode(\n");
      if (annotations != null)
        buffer.append(annotations.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (modifiers != null)
        buffer.append(modifiers.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append("  "+tab+name);
    buffer.append("\n");
      if (instanceLimit != null)
        buffer.append(instanceLimit.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (superClass != null)
        buffer.append(superClass.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (interfaces != null)
        buffer.append(interfaces.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (body != null)
        buffer.append(body.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (typeParams != null)
        buffer.append(typeParams.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [ClassDeclNode]");
    return buffer.toString();
  }
}
