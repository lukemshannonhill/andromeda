/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

import com.sc2mod.andromeda.notifications.InternalProgramError;
import com.sc2mod.andromeda.environment.SemanticsElement;
import com.sc2mod.andromeda.environment.variables.VarDecl;

public class IdentifierNode extends SyntaxNode {

  private SyntaxNode parent;
  private String id;
  private com.sc2mod.andromeda.environment.types.Type inferedType;

  public IdentifierNode (String id) {
    this.id = id;
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public com.sc2mod.andromeda.environment.types.Type getInferedType() {
    return inferedType;
  }

  public void setInferedType(com.sc2mod.andromeda.environment.types.Type inferedType) {
    this.inferedType = inferedType;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  private VarDecl semantics;
  @Override
  public void setSemantics(SemanticsElement semantics){
  	if(!(semantics instanceof VarDecl)) throw new InternalProgramError(this,"Trying to assign semantics of type "
  				+ semantics.getClass().getSimpleName() + " to node " + this.getClass().getSimpleName());
  	this.semantics = (VarDecl)semantics;
  }
  @Override
  public VarDecl getSemantics(){
  	return semantics;
  }

	public void childrenAccept(VoidVisitor visitor){
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
	}
  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("IdentifierNode(\n");
    buffer.append("  "+tab+id);
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [IdentifierNode]");
    return buffer.toString();
  }
}
