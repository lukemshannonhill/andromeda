/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;


public abstract class GlobalStructureNode extends SyntaxNode {

  private SyntaxNode parent;

  public AnnotationListNode getAnnotations() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setAnnotations(AnnotationListNode annotations) {
    throw new ClassCastException("tried to call abstract method");
  }

  public ModifierListNode getModifiers() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setModifiers(ModifierListNode modifiers) {
    throw new ClassCastException("tried to call abstract method");
  }

  public String getName() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setName(String name) {
    throw new ClassCastException("tried to call abstract method");
  }

  public ExprNode getInstanceLimit() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setInstanceLimit(ExprNode instanceLimit) {
    throw new ClassCastException("tried to call abstract method");
  }

  public TypeNode getSuperClass() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setSuperClass(TypeNode superClass) {
    throw new ClassCastException("tried to call abstract method");
  }

  public TypeListNode getInterfaces() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setInterfaces(TypeListNode interfaces) {
    throw new ClassCastException("tried to call abstract method");
  }

  public MemberDeclListNode getBody() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setBody(MemberDeclListNode body) {
    throw new ClassCastException("tried to call abstract method");
  }

  public TypeParamListNode getTypeParams() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setTypeParams(TypeParamListNode typeParams) {
    throw new ClassCastException("tried to call abstract method");
  }

  public TypeNode getEnrichedType() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setEnrichedType(TypeNode enrichedType) {
    throw new ClassCastException("tried to call abstract method");
  }

  public MethodDeclNode getFuncDecl() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setFuncDecl(MethodDeclNode funcDecl) {
    throw new ClassCastException("tried to call abstract method");
  }

  public FieldDeclNode getFieldDecl() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setFieldDecl(FieldDeclNode fieldDecl) {
    throw new ClassCastException("tried to call abstract method");
  }

  public StaticInitDeclNode getInitDecl() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setInitDecl(StaticInitDeclNode initDecl) {
    throw new ClassCastException("tried to call abstract method");
  }

  public SourceFileNode getIncludedContent() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setIncludedContent(SourceFileNode includedContent) {
    throw new ClassCastException("tried to call abstract method");
  }

  public boolean isKey() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setKey(boolean key) {
    throw new ClassCastException("tried to call abstract method");
  }

  public boolean isDisjoint() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setDisjoint(boolean disjoint) {
    throw new ClassCastException("tried to call abstract method");
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public String toString() {
    return toString("");
  }

  public abstract String toString(String tab);
}
