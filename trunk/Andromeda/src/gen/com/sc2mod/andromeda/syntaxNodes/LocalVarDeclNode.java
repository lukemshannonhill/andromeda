/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

public class LocalVarDeclNode extends SyntaxNode {

  private SyntaxNode parent;
  private ModifierListNode modifiers;
  private TypeNode type;
  private VarDeclListNode declarators;

  public LocalVarDeclNode (ModifierListNode modifiers, TypeNode type, VarDeclListNode declarators) {
    this.modifiers = modifiers;
    if (modifiers != null) modifiers.setParent(this);
    this.type = type;
    if (type != null) type.setParent(this);
    this.declarators = declarators;
    if (declarators != null) declarators.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public ModifierListNode getModifiers() {
    return modifiers;
  }

  public void setModifiers(ModifierListNode modifiers) {
    this.modifiers = modifiers;
  }

  public TypeNode getType() {
    return type;
  }

  public void setType(TypeNode type) {
    this.type = type;
  }

  public VarDeclListNode getDeclarators() {
    return declarators;
  }

  public void setDeclarators(VarDeclListNode declarators) {
    this.declarators = declarators;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (modifiers != null) modifiers.accept(visitor);
		if (type != null) type.accept(visitor);
		if (declarators != null) declarators.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (modifiers != null) result$ = visitor.reduce(result$,modifiers.accept(visitor,state));
		if (type != null) result$ = visitor.reduce(result$,type.accept(visitor,state));
		if (declarators != null) result$ = visitor.reduce(result$,declarators.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (modifiers != null) modifiers.accept(visitor,state);
		if (type != null) type.accept(visitor,state);
		if (declarators != null) declarators.accept(visitor,state);
	}
  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("LocalVarDeclNode(\n");
      if (modifiers != null)
        buffer.append(modifiers.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (type != null)
        buffer.append(type.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (declarators != null)
        buffer.append(declarators.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [LocalVarDeclNode]");
    return buffer.toString();
  }
}
