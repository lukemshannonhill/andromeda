/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

import com.sc2mod.andromeda.notifications.InternalProgramError;
import com.sc2mod.andromeda.environment.SemanticsElement;
import com.sc2mod.andromeda.semAnalysis.LoopSemantics;

public class ForStmtNode extends StmtNode {

  private StmtNode forInit;
  private ExprNode condition;
  private BlockStmtNode forUpdate;
  private StmtNode thenStatement;

  public ForStmtNode (StmtNode forInit, ExprNode condition, BlockStmtNode forUpdate, StmtNode thenStatement) {
    this.forInit = forInit;
    if (forInit != null) forInit.setParent(this);
    this.condition = condition;
    if (condition != null) condition.setParent(this);
    this.forUpdate = forUpdate;
    if (forUpdate != null) forUpdate.setParent(this);
    this.thenStatement = thenStatement;
    if (thenStatement != null) thenStatement.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public StmtNode getForInit() {
    return forInit;
  }

  public void setForInit(StmtNode forInit) {
    this.forInit = forInit;
  }

  public ExprNode getCondition() {
    return condition;
  }

  public void setCondition(ExprNode condition) {
    this.condition = condition;
  }

  public BlockStmtNode getForUpdate() {
    return forUpdate;
  }

  public void setForUpdate(BlockStmtNode forUpdate) {
    this.forUpdate = forUpdate;
  }

  public StmtNode getThenStatement() {
    return thenStatement;
  }

  public void setThenStatement(StmtNode thenStatement) {
    this.thenStatement = thenStatement;
  }

  private LoopSemantics semantics;
  @Override
  public void setSemantics(SemanticsElement semantics){
  	if(!(semantics instanceof LoopSemantics)) throw new InternalProgramError(this,"Trying to assign semantics of type "
  				+ semantics.getClass().getSimpleName() + " to node " + this.getClass().getSimpleName());
  	this.semantics = (LoopSemantics)semantics;
  }
  @Override
  public LoopSemantics getSemantics(){
  	return semantics;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (forInit != null) forInit.accept(visitor);
		if (condition != null) condition.accept(visitor);
		if (forUpdate != null) forUpdate.accept(visitor);
		if (thenStatement != null) thenStatement.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (forInit != null) result$ = visitor.reduce(result$,forInit.accept(visitor,state));
		if (condition != null) result$ = visitor.reduce(result$,condition.accept(visitor,state));
		if (forUpdate != null) result$ = visitor.reduce(result$,forUpdate.accept(visitor,state));
		if (thenStatement != null) result$ = visitor.reduce(result$,thenStatement.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (forInit != null) forInit.accept(visitor,state);
		if (condition != null) condition.accept(visitor,state);
		if (forUpdate != null) forUpdate.accept(visitor,state);
		if (thenStatement != null) thenStatement.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("ForStmtNode(\n");
      if (forInit != null)
        buffer.append(forInit.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (condition != null)
        buffer.append(condition.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (forUpdate != null)
        buffer.append(forUpdate.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (thenStatement != null)
        buffer.append(thenStatement.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [ForStmtNode]");
    return buffer.toString();
  }
}
