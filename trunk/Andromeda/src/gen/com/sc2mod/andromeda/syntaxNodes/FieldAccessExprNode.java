/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

import com.sc2mod.andromeda.notifications.InternalProgramError;
import com.sc2mod.andromeda.environment.SemanticsElement;
import com.sc2mod.andromeda.environment.variables.VarDecl;

public class FieldAccessExprNode extends ExprNode {

  private ExprNode leftExpression;
  private String name;

  public FieldAccessExprNode (ExprNode leftExpression, String name) {
    this.leftExpression = leftExpression;
    if (leftExpression != null) leftExpression.setParent(this);
    this.name = name;
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public ExprNode getLeftExpression() {
    return leftExpression;
  }

  public void setLeftExpression(ExprNode leftExpression) {
    this.leftExpression = leftExpression;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  private VarDecl semantics;
  @Override
  public void setSemantics(SemanticsElement semantics){
  	if(!(semantics instanceof VarDecl)) throw new InternalProgramError(this,"Trying to assign semantics of type "
  				+ semantics.getClass().getSimpleName() + " to node " + this.getClass().getSimpleName());
  	this.semantics = (VarDecl)semantics;
  }
  @Override
  public VarDecl getSemantics(){
  	return semantics;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (leftExpression != null) leftExpression.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (leftExpression != null) result$ = visitor.reduce(result$,leftExpression.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (leftExpression != null) leftExpression.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("FieldAccessExprNode(\n");
      if (leftExpression != null)
        buffer.append(leftExpression.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append("  "+tab+name);
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [FieldAccessExprNode]");
    return buffer.toString();
  }
}
