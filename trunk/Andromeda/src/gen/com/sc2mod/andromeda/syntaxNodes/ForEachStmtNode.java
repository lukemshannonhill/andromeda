/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

import com.sc2mod.andromeda.notifications.InternalProgramError;
import com.sc2mod.andromeda.environment.SemanticsElement;
import com.sc2mod.andromeda.semAnalysis.ForeachSemantics;

public class ForEachStmtNode extends StmtNode {

  private TypeNode iteratorType;
  private IdentifierNode iterator;
  private ExprNode expression;
  private StmtNode thenStatement;

  public ForEachStmtNode (TypeNode iteratorType, IdentifierNode iterator, ExprNode expression, StmtNode thenStatement) {
    this.iteratorType = iteratorType;
    if (iteratorType != null) iteratorType.setParent(this);
    this.iterator = iterator;
    if (iterator != null) iterator.setParent(this);
    this.expression = expression;
    if (expression != null) expression.setParent(this);
    this.thenStatement = thenStatement;
    if (thenStatement != null) thenStatement.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public TypeNode getIteratorType() {
    return iteratorType;
  }

  public void setIteratorType(TypeNode iteratorType) {
    this.iteratorType = iteratorType;
  }

  public IdentifierNode getIterator() {
    return iterator;
  }

  public void setIterator(IdentifierNode iterator) {
    this.iterator = iterator;
  }

  public ExprNode getExpression() {
    return expression;
  }

  public void setExpression(ExprNode expression) {
    this.expression = expression;
  }

  public StmtNode getThenStatement() {
    return thenStatement;
  }

  public void setThenStatement(StmtNode thenStatement) {
    this.thenStatement = thenStatement;
  }

  private ForeachSemantics semantics;
  @Override
  public void setSemantics(SemanticsElement semantics){
  	if(!(semantics instanceof ForeachSemantics)) throw new InternalProgramError(this,"Trying to assign semantics of type "
  				+ semantics.getClass().getSimpleName() + " to node " + this.getClass().getSimpleName());
  	this.semantics = (ForeachSemantics)semantics;
  }
  @Override
  public ForeachSemantics getSemantics(){
  	return semantics;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (iteratorType != null) iteratorType.accept(visitor);
		if (iterator != null) iterator.accept(visitor);
		if (expression != null) expression.accept(visitor);
		if (thenStatement != null) thenStatement.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (iteratorType != null) result$ = visitor.reduce(result$,iteratorType.accept(visitor,state));
		if (iterator != null) result$ = visitor.reduce(result$,iterator.accept(visitor,state));
		if (expression != null) result$ = visitor.reduce(result$,expression.accept(visitor,state));
		if (thenStatement != null) result$ = visitor.reduce(result$,thenStatement.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (iteratorType != null) iteratorType.accept(visitor,state);
		if (iterator != null) iterator.accept(visitor,state);
		if (expression != null) expression.accept(visitor,state);
		if (thenStatement != null) thenStatement.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("ForEachStmtNode(\n");
      if (iteratorType != null)
        buffer.append(iteratorType.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (iterator != null)
        buffer.append(iterator.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (expression != null)
        buffer.append(expression.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (thenStatement != null)
        buffer.append(thenStatement.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [ForEachStmtNode]");
    return buffer.toString();
  }
}
