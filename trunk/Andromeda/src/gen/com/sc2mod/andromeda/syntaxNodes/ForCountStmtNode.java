/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

public class ForCountStmtNode extends StmtNode {

  private TypeNode iteratorType;
  private IdentifierNode iterator;
  private ExprNode fromExpr;
  private ExprNode toExpr;
  private StmtNode thenStatement;

  public ForCountStmtNode (TypeNode iteratorType, IdentifierNode iterator, ExprNode fromExpr, ExprNode toExpr, StmtNode thenStatement) {
    this.iteratorType = iteratorType;
    if (iteratorType != null) iteratorType.setParent(this);
    this.iterator = iterator;
    if (iterator != null) iterator.setParent(this);
    this.fromExpr = fromExpr;
    if (fromExpr != null) fromExpr.setParent(this);
    this.toExpr = toExpr;
    if (toExpr != null) toExpr.setParent(this);
    this.thenStatement = thenStatement;
    if (thenStatement != null) thenStatement.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public TypeNode getIteratorType() {
    return iteratorType;
  }

  public void setIteratorType(TypeNode iteratorType) {
    this.iteratorType = iteratorType;
  }

  public IdentifierNode getIterator() {
    return iterator;
  }

  public void setIterator(IdentifierNode iterator) {
    this.iterator = iterator;
  }

  public ExprNode getFromExpr() {
    return fromExpr;
  }

  public void setFromExpr(ExprNode fromExpr) {
    this.fromExpr = fromExpr;
  }

  public ExprNode getToExpr() {
    return toExpr;
  }

  public void setToExpr(ExprNode toExpr) {
    this.toExpr = toExpr;
  }

  public StmtNode getThenStatement() {
    return thenStatement;
  }

  public void setThenStatement(StmtNode thenStatement) {
    this.thenStatement = thenStatement;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (iteratorType != null) iteratorType.accept(visitor);
		if (iterator != null) iterator.accept(visitor);
		if (fromExpr != null) fromExpr.accept(visitor);
		if (toExpr != null) toExpr.accept(visitor);
		if (thenStatement != null) thenStatement.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (iteratorType != null) result$ = visitor.reduce(result$,iteratorType.accept(visitor,state));
		if (iterator != null) result$ = visitor.reduce(result$,iterator.accept(visitor,state));
		if (fromExpr != null) result$ = visitor.reduce(result$,fromExpr.accept(visitor,state));
		if (toExpr != null) result$ = visitor.reduce(result$,toExpr.accept(visitor,state));
		if (thenStatement != null) result$ = visitor.reduce(result$,thenStatement.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (iteratorType != null) iteratorType.accept(visitor,state);
		if (iterator != null) iterator.accept(visitor,state);
		if (fromExpr != null) fromExpr.accept(visitor,state);
		if (toExpr != null) toExpr.accept(visitor,state);
		if (thenStatement != null) thenStatement.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("ForCountStmtNode(\n");
      if (iteratorType != null)
        buffer.append(iteratorType.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (iterator != null)
        buffer.append(iterator.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (fromExpr != null)
        buffer.append(fromExpr.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (toExpr != null)
        buffer.append(toExpr.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (thenStatement != null)
        buffer.append(thenStatement.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [ForCountStmtNode]");
    return buffer.toString();
  }
}
