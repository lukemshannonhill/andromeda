/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

import com.sc2mod.andromeda.notifications.InternalProgramError;
import com.sc2mod.andromeda.environment.SemanticsElement;
import com.sc2mod.andromeda.environment.scopes.FileScope;

public class SourceFileNode extends SyntaxNode {

  private SyntaxNode parent;
  private PackageDeclNode packageDecl;
  private GlobalStructureListNode imports;
  private GlobalStructureListNode content;
  private com.sc2mod.andromeda.parsing.SourceFileInfo fileInfo;

  public SourceFileNode (PackageDeclNode packageDecl, GlobalStructureListNode imports, GlobalStructureListNode content) {
    this.packageDecl = packageDecl;
    if (packageDecl != null) packageDecl.setParent(this);
    this.imports = imports;
    if (imports != null) imports.setParent(this);
    this.content = content;
    if (content != null) content.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public PackageDeclNode getPackageDecl() {
    return packageDecl;
  }

  public void setPackageDecl(PackageDeclNode packageDecl) {
    this.packageDecl = packageDecl;
  }

  public GlobalStructureListNode getImports() {
    return imports;
  }

  public void setImports(GlobalStructureListNode imports) {
    this.imports = imports;
  }

  public GlobalStructureListNode getContent() {
    return content;
  }

  public void setContent(GlobalStructureListNode content) {
    this.content = content;
  }

  public com.sc2mod.andromeda.parsing.SourceFileInfo getFileInfo() {
    return fileInfo;
  }

  public void setFileInfo(com.sc2mod.andromeda.parsing.SourceFileInfo fileInfo) {
    this.fileInfo = fileInfo;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  private FileScope semantics;
  @Override
  public void setSemantics(SemanticsElement semantics){
  	if(!(semantics instanceof FileScope)) throw new InternalProgramError(this,"Trying to assign semantics of type "
  				+ semantics.getClass().getSimpleName() + " to node " + this.getClass().getSimpleName());
  	this.semantics = (FileScope)semantics;
  }
  @Override
  public FileScope getSemantics(){
  	return semantics;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (packageDecl != null) packageDecl.accept(visitor);
		if (imports != null) imports.accept(visitor);
		if (content != null) content.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (packageDecl != null) result$ = visitor.reduce(result$,packageDecl.accept(visitor,state));
		if (imports != null) result$ = visitor.reduce(result$,imports.accept(visitor,state));
		if (content != null) result$ = visitor.reduce(result$,content.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (packageDecl != null) packageDecl.accept(visitor,state);
		if (imports != null) imports.accept(visitor,state);
		if (content != null) content.accept(visitor,state);
	}
  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("SourceFileNode(\n");
      if (packageDecl != null)
        buffer.append(packageDecl.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (imports != null)
        buffer.append(imports.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (content != null)
        buffer.append(content.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [SourceFileNode]");
    return buffer.toString();
  }
}
