/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

public class FuncPointerTypeNode extends TypeNode {

  private TypeNode returnType;
  private TypeListNode typeArguments;

  public FuncPointerTypeNode (TypeNode returnType, TypeListNode typeArguments) {
    this.returnType = returnType;
    if (returnType != null) returnType.setParent(this);
    this.typeArguments = typeArguments;
    if (typeArguments != null) typeArguments.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public TypeNode getReturnType() {
    return returnType;
  }

  public void setReturnType(TypeNode returnType) {
    this.returnType = returnType;
  }

  public TypeListNode getTypeArguments() {
    return typeArguments;
  }

  public void setTypeArguments(TypeListNode typeArguments) {
    this.typeArguments = typeArguments;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (returnType != null) returnType.accept(visitor);
		if (typeArguments != null) typeArguments.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (returnType != null) result$ = visitor.reduce(result$,returnType.accept(visitor,state));
		if (typeArguments != null) result$ = visitor.reduce(result$,typeArguments.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (returnType != null) returnType.accept(visitor,state);
		if (typeArguments != null) typeArguments.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("FuncPointerTypeNode(\n");
      if (returnType != null)
        buffer.append(returnType.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (typeArguments != null)
        buffer.append(typeArguments.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [FuncPointerTypeNode]");
    return buffer.toString();
  }
}
