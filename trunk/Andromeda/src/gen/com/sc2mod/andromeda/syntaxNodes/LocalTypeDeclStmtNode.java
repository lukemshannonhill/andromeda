/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

public class LocalTypeDeclStmtNode extends StmtNode {

  private ClassDeclNode classDeclaration;

  public LocalTypeDeclStmtNode (ClassDeclNode classDeclaration) {
    this.classDeclaration = classDeclaration;
    if (classDeclaration != null) classDeclaration.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public ClassDeclNode getClassDeclaration() {
    return classDeclaration;
  }

  public void setClassDeclaration(ClassDeclNode classDeclaration) {
    this.classDeclaration = classDeclaration;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (classDeclaration != null) classDeclaration.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (classDeclaration != null) result$ = visitor.reduce(result$,classDeclaration.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (classDeclaration != null) classDeclaration.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("LocalTypeDeclStmtNode(\n");
      if (classDeclaration != null)
        buffer.append(classDeclaration.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [LocalTypeDeclStmtNode]");
    return buffer.toString();
  }
}
