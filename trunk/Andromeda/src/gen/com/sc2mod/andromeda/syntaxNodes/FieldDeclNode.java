/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

public class FieldDeclNode extends MemberDeclNode {

  private AnnotationListNode annotations;
  private ModifierListNode fieldModifiers;
  private TypeNode type;
  private VarDeclListNode declaredVariables;

  public FieldDeclNode (AnnotationListNode annotations, ModifierListNode fieldModifiers, TypeNode type, VarDeclListNode declaredVariables) {
    this.annotations = annotations;
    if (annotations != null) annotations.setParent(this);
    this.fieldModifiers = fieldModifiers;
    if (fieldModifiers != null) fieldModifiers.setParent(this);
    this.type = type;
    if (type != null) type.setParent(this);
    this.declaredVariables = declaredVariables;
    if (declaredVariables != null) declaredVariables.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public AnnotationListNode getAnnotations() {
    return annotations;
  }

  public void setAnnotations(AnnotationListNode annotations) {
    this.annotations = annotations;
  }

  public ModifierListNode getFieldModifiers() {
    return fieldModifiers;
  }

  public void setFieldModifiers(ModifierListNode fieldModifiers) {
    this.fieldModifiers = fieldModifiers;
  }

  public TypeNode getType() {
    return type;
  }

  public void setType(TypeNode type) {
    this.type = type;
  }

  public VarDeclListNode getDeclaredVariables() {
    return declaredVariables;
  }

  public void setDeclaredVariables(VarDeclListNode declaredVariables) {
    this.declaredVariables = declaredVariables;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (annotations != null) annotations.accept(visitor);
		if (fieldModifiers != null) fieldModifiers.accept(visitor);
		if (type != null) type.accept(visitor);
		if (declaredVariables != null) declaredVariables.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (annotations != null) result$ = visitor.reduce(result$,annotations.accept(visitor,state));
		if (fieldModifiers != null) result$ = visitor.reduce(result$,fieldModifiers.accept(visitor,state));
		if (type != null) result$ = visitor.reduce(result$,type.accept(visitor,state));
		if (declaredVariables != null) result$ = visitor.reduce(result$,declaredVariables.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (annotations != null) annotations.accept(visitor,state);
		if (fieldModifiers != null) fieldModifiers.accept(visitor,state);
		if (type != null) type.accept(visitor,state);
		if (declaredVariables != null) declaredVariables.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("FieldDeclNode(\n");
      if (annotations != null)
        buffer.append(annotations.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (fieldModifiers != null)
        buffer.append(fieldModifiers.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (type != null)
        buffer.append(type.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (declaredVariables != null)
        buffer.append(declaredVariables.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [FieldDeclNode]");
    return buffer.toString();
  }
}
