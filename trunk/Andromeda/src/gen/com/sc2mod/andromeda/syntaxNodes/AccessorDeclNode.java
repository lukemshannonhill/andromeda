/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

import com.sc2mod.andromeda.notifications.InternalProgramError;
import com.sc2mod.andromeda.environment.SemanticsElement;
import com.sc2mod.andromeda.environment.variables.AccessorDecl;

public class AccessorDeclNode extends MemberDeclNode {

  private AnnotationListNode annotations;
  private ModifierListNode fieldModifiers;
  private TypeNode type;
  private IdentifierNode accessorName;
  private ParameterListNode accessorParameters;
  private MethodDeclNode getMethod;
  private MethodDeclNode setMethod;
  private boolean accessorUseThis;

  public AccessorDeclNode (AnnotationListNode annotations, ModifierListNode fieldModifiers, TypeNode type, IdentifierNode accessorName, ParameterListNode accessorParameters, MethodDeclNode getMethod, MethodDeclNode setMethod, boolean accessorUseThis) {
    this.annotations = annotations;
    if (annotations != null) annotations.setParent(this);
    this.fieldModifiers = fieldModifiers;
    if (fieldModifiers != null) fieldModifiers.setParent(this);
    this.type = type;
    if (type != null) type.setParent(this);
    this.accessorName = accessorName;
    if (accessorName != null) accessorName.setParent(this);
    this.accessorParameters = accessorParameters;
    if (accessorParameters != null) accessorParameters.setParent(this);
    this.getMethod = getMethod;
    if (getMethod != null) getMethod.setParent(this);
    this.setMethod = setMethod;
    if (setMethod != null) setMethod.setParent(this);
    this.accessorUseThis = accessorUseThis;
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public AnnotationListNode getAnnotations() {
    return annotations;
  }

  public void setAnnotations(AnnotationListNode annotations) {
    this.annotations = annotations;
  }

  public ModifierListNode getFieldModifiers() {
    return fieldModifiers;
  }

  public void setFieldModifiers(ModifierListNode fieldModifiers) {
    this.fieldModifiers = fieldModifiers;
  }

  public TypeNode getType() {
    return type;
  }

  public void setType(TypeNode type) {
    this.type = type;
  }

  public IdentifierNode getAccessorName() {
    return accessorName;
  }

  public void setAccessorName(IdentifierNode accessorName) {
    this.accessorName = accessorName;
  }

  public ParameterListNode getAccessorParameters() {
    return accessorParameters;
  }

  public void setAccessorParameters(ParameterListNode accessorParameters) {
    this.accessorParameters = accessorParameters;
  }

  public MethodDeclNode getGetMethod() {
    return getMethod;
  }

  public void setGetMethod(MethodDeclNode getMethod) {
    this.getMethod = getMethod;
  }

  public MethodDeclNode getSetMethod() {
    return setMethod;
  }

  public void setSetMethod(MethodDeclNode setMethod) {
    this.setMethod = setMethod;
  }

  public boolean isAccessorUseThis() {
    return accessorUseThis;
  }

  public void setAccessorUseThis(boolean accessorUseThis) {
    this.accessorUseThis = accessorUseThis;
  }

  private AccessorDecl semantics;
  @Override
  public void setSemantics(SemanticsElement semantics){
  	if(!(semantics instanceof AccessorDecl)) throw new InternalProgramError(this,"Trying to assign semantics of type "
  				+ semantics.getClass().getSimpleName() + " to node " + this.getClass().getSimpleName());
  	this.semantics = (AccessorDecl)semantics;
  }
  @Override
  public AccessorDecl getSemantics(){
  	return semantics;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (annotations != null) annotations.accept(visitor);
		if (fieldModifiers != null) fieldModifiers.accept(visitor);
		if (type != null) type.accept(visitor);
		if (accessorName != null) accessorName.accept(visitor);
		if (accessorParameters != null) accessorParameters.accept(visitor);
		if (getMethod != null) getMethod.accept(visitor);
		if (setMethod != null) setMethod.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (annotations != null) result$ = visitor.reduce(result$,annotations.accept(visitor,state));
		if (fieldModifiers != null) result$ = visitor.reduce(result$,fieldModifiers.accept(visitor,state));
		if (type != null) result$ = visitor.reduce(result$,type.accept(visitor,state));
		if (accessorName != null) result$ = visitor.reduce(result$,accessorName.accept(visitor,state));
		if (accessorParameters != null) result$ = visitor.reduce(result$,accessorParameters.accept(visitor,state));
		if (getMethod != null) result$ = visitor.reduce(result$,getMethod.accept(visitor,state));
		if (setMethod != null) result$ = visitor.reduce(result$,setMethod.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (annotations != null) annotations.accept(visitor,state);
		if (fieldModifiers != null) fieldModifiers.accept(visitor,state);
		if (type != null) type.accept(visitor,state);
		if (accessorName != null) accessorName.accept(visitor,state);
		if (accessorParameters != null) accessorParameters.accept(visitor,state);
		if (getMethod != null) getMethod.accept(visitor,state);
		if (setMethod != null) setMethod.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("AccessorDeclNode(\n");
      if (annotations != null)
        buffer.append(annotations.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (fieldModifiers != null)
        buffer.append(fieldModifiers.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (type != null)
        buffer.append(type.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (accessorName != null)
        buffer.append(accessorName.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (accessorParameters != null)
        buffer.append(accessorParameters.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (getMethod != null)
        buffer.append(getMethod.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (setMethod != null)
        buffer.append(setMethod.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append("  "+tab+accessorUseThis);
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [AccessorDeclNode]");
    return buffer.toString();
  }
}
