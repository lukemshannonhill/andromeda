/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;


public abstract class StmtNode extends SyntaxNode {

  private StmtNode successor;
  private com.sc2mod.andromeda.semAnalysis.SuccessorList successors;
  private SyntaxNode parent;

  public StmtListNode getStatements() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setStatements(StmtListNode statements) {
    throw new ClassCastException("tried to call abstract method");
  }

  public ExprNode getExpression() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setExpression(ExprNode expression) {
    throw new ClassCastException("tried to call abstract method");
  }

  public ClassDeclNode getClassDeclaration() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setClassDeclaration(ClassDeclNode classDeclaration) {
    throw new ClassCastException("tried to call abstract method");
  }

  public LocalVarDeclNode getVarDeclaration() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setVarDeclaration(LocalVarDeclNode varDeclaration) {
    throw new ClassCastException("tried to call abstract method");
  }

  public ExprNode getCondition() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setCondition(ExprNode condition) {
    throw new ClassCastException("tried to call abstract method");
  }

  public StmtNode getThenStatement() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setThenStatement(StmtNode thenStatement) {
    throw new ClassCastException("tried to call abstract method");
  }

  public StmtNode getElseStatement() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setElseStatement(StmtNode elseStatement) {
    throw new ClassCastException("tried to call abstract method");
  }

  public StmtNode getForInit() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setForInit(StmtNode forInit) {
    throw new ClassCastException("tried to call abstract method");
  }

  public BlockStmtNode getForUpdate() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setForUpdate(BlockStmtNode forUpdate) {
    throw new ClassCastException("tried to call abstract method");
  }

  public TypeNode getIteratorType() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setIteratorType(TypeNode iteratorType) {
    throw new ClassCastException("tried to call abstract method");
  }

  public IdentifierNode getIterator() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setIterator(IdentifierNode iterator) {
    throw new ClassCastException("tried to call abstract method");
  }

  public ExprNode getFromExpr() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setFromExpr(ExprNode fromExpr) {
    throw new ClassCastException("tried to call abstract method");
  }

  public ExprNode getToExpr() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setToExpr(ExprNode toExpr) {
    throw new ClassCastException("tried to call abstract method");
  }

  public String getLabel() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setLabel(String label) {
    throw new ClassCastException("tried to call abstract method");
  }

  public ExprNode getResult() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setResult(ExprNode result) {
    throw new ClassCastException("tried to call abstract method");
  }

  public boolean isUseSuper() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setUseSuper(boolean useSuper) {
    throw new ClassCastException("tried to call abstract method");
  }

  public ExprListNode getArguments() {
    throw new ClassCastException("tried to call abstract method");
  }

  public void setArguments(ExprListNode arguments) {
    throw new ClassCastException("tried to call abstract method");
  }

  public StmtNode getSuccessor() {
    return successor;
  }

  public void setSuccessor(StmtNode successor) {
    this.successor = successor;
  }

  public com.sc2mod.andromeda.semAnalysis.SuccessorList getSuccessors() {
    return successors;
  }

  public void setSuccessors(com.sc2mod.andromeda.semAnalysis.SuccessorList successors) {
    this.successors = successors;
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public String toString() {
    return toString("");
  }

  public abstract String toString(String tab);
}
