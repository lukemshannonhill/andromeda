/*
 * Generated by classgen, version 1.5
 * 24.10.10 21:59
 */
package com.sc2mod.andromeda.syntaxNodes;

import com.sc2mod.andromeda.syntaxNodes.util.*;

public class InstanceLimitSetterNode extends GlobalStructureNode {

  private TypeNode enrichedType;
  private ExprNode instanceLimit;

  public InstanceLimitSetterNode (TypeNode enrichedType, ExprNode instanceLimit) {
    this.enrichedType = enrichedType;
    if (enrichedType != null) enrichedType.setParent(this);
    this.instanceLimit = instanceLimit;
    if (instanceLimit != null) instanceLimit.setParent(this);
  }

	public void accept(VoidVisitor visitor) { visitor.visit(this); }
	public <P,R> R accept(Visitor<P,R> visitor,P state) { return visitor.visit(this,state); }
	public <P> void accept(NoResultVisitor<P> visitor,P state) { visitor.visit(this,state); }
  public TypeNode getEnrichedType() {
    return enrichedType;
  }

  public void setEnrichedType(TypeNode enrichedType) {
    this.enrichedType = enrichedType;
  }

  public ExprNode getInstanceLimit() {
    return instanceLimit;
  }

  public void setInstanceLimit(ExprNode instanceLimit) {
    this.instanceLimit = instanceLimit;
  }

	public void childrenAccept(VoidVisitor visitor){
		if (enrichedType != null) enrichedType.accept(visitor);
		if (instanceLimit != null) instanceLimit.accept(visitor);
	}

	public <P,R> R childrenAccept(Visitor<P,R> visitor,P state){
		R result$ = null;
		if (enrichedType != null) result$ = visitor.reduce(result$,enrichedType.accept(visitor,state));
		if (instanceLimit != null) result$ = visitor.reduce(result$,instanceLimit.accept(visitor,state));
		return result$;
	}
	public <P> void childrenAccept(NoResultVisitor<P> visitor,P state){
		if (enrichedType != null) enrichedType.accept(visitor,state);
		if (instanceLimit != null) instanceLimit.accept(visitor,state);
	}
  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("InstanceLimitSetterNode(\n");
      if (enrichedType != null)
        buffer.append(enrichedType.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (instanceLimit != null)
        buffer.append(instanceLimit.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [InstanceLimitSetterNode]");
    return buffer.toString();
  }
}
