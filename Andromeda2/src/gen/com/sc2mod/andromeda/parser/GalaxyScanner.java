/* The following code was generated by JFlex 1.4.3 on 25.09.10 11:38 */

/**
 * Andromeda, a galaxy extension language.
 * Copyright (C) J. 'gex' Finis @2010 (gekko_tgh@gmx.de, sc2mod.com)
 * See doc/license.txt for license information.
 */
package com.sc2mod.andromeda.parser;

import com.sc2mod.andromeda.parsing.SourceReader;
import com.sc2mod.andromeda.parsing.SourceFileInfo;
import com.sc2mod.andromeda.parsing.InclusionType;
import com.sc2mod.andromeda.notifications.Problem;
import com.sc2mod.andromeda.notifications.ProblemId;
import com.sc2mod.andromeda.parsing.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25.09.10 11:38 from the specification file
 * <tt>/Projects/java/galaxy/lang/galaxy.flex</tt>
 */
public class GalaxyScanner implements sym {

  /** This character denotes abc the end of file */
  public static final int YYEOF = -1;
  
  
  private final SymbolFactory symbolFactory = new SymbolFactory();
  
  public SymbolFactory getSymbolFactory(){
  	return symbolFactory;
  }

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\74"+
    "\1\24\1\0\1\6\1\103\1\100\1\25\1\60\1\61\1\5\1\23"+
    "\1\67\1\30\1\21\1\4\1\10\1\16\1\104\1\15\1\105\1\17"+
    "\1\110\1\106\1\107\1\11\1\77\1\66\1\73\1\72\1\70\1\76"+
    "\1\71\3\14\1\111\1\22\1\20\5\27\1\12\13\27\1\13\2\27"+
    "\1\64\1\26\1\65\1\102\1\27\1\0\1\31\1\32\1\36\1\54"+
    "\1\41\1\52\1\50\1\44\1\51\1\27\1\42\1\40\1\53\1\46"+
    "\1\37\1\47\1\27\1\35\1\33\1\34\1\45\1\56\1\57\1\55"+
    "\1\43\1\27\1\62\1\101\1\63\1\75\41\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0"+
    "\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6\11\0"+
    "\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0\46\6\1\0"+
    "\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0\46\6\2\0"+
    "\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0\47\6\11\0"+
    "\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0\2\7\1\0"+
    "\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0\6\7\13\0"+
    "\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6\1\7\143\6"+
    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6"+
    "\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7"+
    "\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7\66\6\2\0"+
    "\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6\2\7\2\0"+
    "\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6"+
    "\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0\2\7\4\0"+
    "\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6"+
    "\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6\1\0\3\6"+
    "\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7\17\0\11\7"+
    "\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7\1\0\4\7"+
    "\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7\1\0\22\6"+
    "\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7"+
    "\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6"+
    "\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6"+
    "\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6"+
    "\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6"+
    "\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6\42\0\1\6"+
    "\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7"+
    "\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0\2\7\4\6"+
    "\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6\1\0\5\6"+
    "\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7\6\0\6\6"+
    "\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0\104\6\5\0"+
    "\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0\1\6\1\0"+
    "\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0\27\6\1\0"+
    "\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\47\6\1\0"+
    "\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0\10\6\12\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6"+
    "\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6"+
    "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"+
    "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"+
    "\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7\32\0\5\7"+
    "\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7\1\0\1\6"+
    "\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7\3\0\6\7"+
    "\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6"+
    "\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6\u0e81\0\3\6"+
    "\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0"+
    "\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0\136\6\21\0"+
    "\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0\u048d\6\u0773\0"+
    "\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0\5\6\5\0"+
    "\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0"+
    "\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0"+
    "\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0\2\6\30\0"+
    "\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0"+
    "\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\12\0"+
    "\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0"+
    "\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\1\13\23\5\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\2\41\1\42\2\1\2\43\1\1\1\2"+
    "\1\0\1\44\1\45\1\46\1\47\1\50\1\0\3\46"+
    "\1\51\1\47\1\0\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\0\37\5\1\61\1\5\1\62\5\5"+
    "\1\63\3\5\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\2\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\13\113\1\0\1\114\2\115\2\46\1\47\2\0"+
    "\6\5\1\116\4\5\1\117\21\5\1\120\5\5\1\121"+
    "\2\5\1\122\4\5\1\123\7\5\1\124\1\125\1\126"+
    "\1\101\1\0\1\127\1\0\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\1\136\1\137\1\140\1\115\2\46\1\0"+
    "\2\5\1\141\1\142\7\5\1\143\3\5\1\144\4\5"+
    "\1\145\1\5\1\146\1\147\3\5\1\150\1\5\1\151"+
    "\21\5\1\152\1\5\1\153\1\115\2\46\1\0\1\5"+
    "\1\154\3\5\1\155\1\156\3\5\1\157\1\5\1\160"+
    "\1\161\1\5\1\162\3\5\1\163\5\5\1\164\6\5"+
    "\1\165\1\5\1\166\1\167\2\5\1\170\1\115\2\46"+
    "\1\0\1\5\1\171\1\172\1\5\1\173\2\5\1\174"+
    "\1\175\2\5\1\176\1\5\1\177\3\5\1\200\3\5"+
    "\1\201\1\202\3\5\1\203\1\5\1\115\2\46\1\0"+
    "\3\5\1\204\2\5\1\205\1\206\1\5\1\207\5\5"+
    "\1\210\1\211\1\115\2\46\1\0\1\212\2\5\1\213"+
    "\1\214\3\5\2\0\1\5\1\215\1\115\2\46\1\0"+
    "\1\5\1\216\1\217\1\5\1\220\1\0\1\5\1\115"+
    "\2\46\1\0\1\5\1\221\1\222\1\223\1\0\2\46"+
    "\1\224\1\5\1\0\2\46\1\5\1\0\2\46\1\5"+
    "\1\0\2\46\1\5\1\0\2\46\1\5\1\0\2\46"+
    "\1\225\1\0\1\46\1\47\1\0\5\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\112\0\224\0\336\0\u0128\0\336\0\u0172\0\u01bc"+
    "\0\u0206\0\u0250\0\u029a\0\u02e4\0\u032e\0\336\0\336\0\u0378"+
    "\0\u03c2\0\u040c\0\u0456\0\u04a0\0\u04ea\0\u0534\0\u057e\0\u05c8"+
    "\0\u0612\0\u065c\0\u06a6\0\u06f0\0\u073a\0\u0784\0\u07ce\0\u0818"+
    "\0\u0862\0\u08ac\0\u08f6\0\336\0\336\0\336\0\336\0\336"+
    "\0\336\0\336\0\336\0\u0940\0\336\0\u098a\0\u09d4\0\u0a1e"+
    "\0\336\0\336\0\336\0\u0a68\0\u0ab2\0\u0afc\0\u0b46\0\u0b90"+
    "\0\u0bda\0\336\0\336\0\u0c24\0\u0c6e\0\u0cb8\0\336\0\u0d02"+
    "\0\u0d4c\0\u0d96\0\336\0\336\0\u0de0\0\u0e2a\0\336\0\u0e74"+
    "\0\u0ebe\0\u0f08\0\u0f52\0\336\0\u0f9c\0\u0fe6\0\336\0\336"+
    "\0\336\0\336\0\336\0\336\0\336\0\u1030\0\u107a\0\u10c4"+
    "\0\u110e\0\u1158\0\u11a2\0\u11ec\0\u1236\0\u1280\0\u12ca\0\u1314"+
    "\0\u135e\0\u13a8\0\u13f2\0\u143c\0\u1486\0\u14d0\0\u151a\0\u1564"+
    "\0\u15ae\0\u15f8\0\u1642\0\u168c\0\u16d6\0\u1720\0\u176a\0\u17b4"+
    "\0\u17fe\0\u1848\0\u1892\0\u18dc\0\u1926\0\u1970\0\u19ba\0\u0206"+
    "\0\u1a04\0\u1a4e\0\u1a98\0\u1ae2\0\u1b2c\0\u0206\0\u1b76\0\u1bc0"+
    "\0\u1c0a\0\u1c54\0\336\0\336\0\336\0\u1c9e\0\336\0\336"+
    "\0\336\0\336\0\336\0\336\0\336\0\336\0\u1ce8\0\u1d32"+
    "\0\336\0\336\0\336\0\336\0\336\0\336\0\336\0\336"+
    "\0\336\0\336\0\u1d7c\0\u1dc6\0\u1e10\0\u1e5a\0\u1ea4\0\u1eee"+
    "\0\u1f38\0\u1f82\0\u1fcc\0\u2016\0\u2060\0\336\0\u20aa\0\u20f4"+
    "\0\u213e\0\u2188\0\u21d2\0\u221c\0\u2266\0\u22b0\0\u22fa\0\u2344"+
    "\0\u238e\0\u23d8\0\u2422\0\u246c\0\u24b6\0\u2500\0\u254a\0\u2594"+
    "\0\u0206\0\u25de\0\u2628\0\u2672\0\u26bc\0\u2706\0\u2750\0\u279a"+
    "\0\u27e4\0\u282e\0\u2878\0\u28c2\0\u290c\0\u2956\0\u29a0\0\u29ea"+
    "\0\u2a34\0\u2a7e\0\u0206\0\u2ac8\0\u2b12\0\u2b5c\0\u2ba6\0\u2bf0"+
    "\0\u0206\0\u2c3a\0\u2c84\0\u2cce\0\u2d18\0\u2d62\0\u2dac\0\u2df6"+
    "\0\u0206\0\u2e40\0\u2e8a\0\u2ed4\0\u2f1e\0\u2f68\0\u2fb2\0\u2ffc"+
    "\0\u3046\0\336\0\336\0\336\0\u1dc6\0\336\0\u3090\0\336"+
    "\0\336\0\336\0\336\0\336\0\336\0\336\0\336\0\336"+
    "\0\u30da\0\u3124\0\u316e\0\u31b8\0\u3202\0\u324c\0\u0206\0\u0206"+
    "\0\u3296\0\u32e0\0\u332a\0\u3374\0\u33be\0\u3408\0\u3452\0\u0206"+
    "\0\u349c\0\u34e6\0\u3530\0\u0206\0\u357a\0\u35c4\0\u360e\0\u3658"+
    "\0\u0206\0\u36a2\0\u0206\0\u0206\0\u36ec\0\u3736\0\u3780\0\u0206"+
    "\0\u37ca\0\u0206\0\u3814\0\u385e\0\u38a8\0\u38f2\0\u393c\0\u3986"+
    "\0\u39d0\0\u3a1a\0\u3a64\0\u3aae\0\u3af8\0\u3b42\0\u3b8c\0\u3bd6"+
    "\0\u3c20\0\u3c6a\0\u3cb4\0\u0206\0\u3cfe\0\336\0\u3d48\0\u3d92"+
    "\0\u3ddc\0\u3e26\0\u3e70\0\u0206\0\u3eba\0\u3f04\0\u3f4e\0\u0206"+
    "\0\u0206\0\u3f98\0\u3fe2\0\u402c\0\u4076\0\u40c0\0\u0206\0\u0206"+
    "\0\u410a\0\u0206\0\u4154\0\u419e\0\u41e8\0\u0206\0\u4232\0\u427c"+
    "\0\u42c6\0\u4310\0\u435a\0\u0206\0\u43a4\0\u43ee\0\u4438\0\u4482"+
    "\0\u44cc\0\u4516\0\u0206\0\u4560\0\u45aa\0\u0206\0\u45f4\0\u463e"+
    "\0\u0206\0\u4688\0\u46d2\0\u471c\0\u4766\0\u47b0\0\u0206\0\u0206"+
    "\0\u47fa\0\u0206\0\u4844\0\u488e\0\u0206\0\u0206\0\u48d8\0\u4922"+
    "\0\u0206\0\u496c\0\u0206\0\u49b6\0\u4a00\0\u4a4a\0\u0206\0\u4a94"+
    "\0\u4ade\0\u4b28\0\u0206\0\u0206\0\u4b72\0\u4bbc\0\u4c06\0\u0206"+
    "\0\u4c50\0\u4c9a\0\u4ce4\0\u4d2e\0\u4d78\0\u4dc2\0\u4e0c\0\u4e56"+
    "\0\u0206\0\u4ea0\0\u4eea\0\u0206\0\u0206\0\u4f34\0\u0206\0\u4f7e"+
    "\0\u4fc8\0\u5012\0\u505c\0\u50a6\0\u0206\0\u0206\0\u50f0\0\u513a"+
    "\0\u5184\0\u51ce\0\u0206\0\u5218\0\u5262\0\u0206\0\u0206\0\u52ac"+
    "\0\u52f6\0\u5340\0\u538a\0\u53d4\0\u541e\0\u0206\0\u5468\0\u54b2"+
    "\0\u54fc\0\u5546\0\u5590\0\u0206\0\u0206\0\u55da\0\u0206\0\u5624"+
    "\0\u566e\0\u56b8\0\u5702\0\u574c\0\u5796\0\u57e0\0\u0206\0\336"+
    "\0\u0206\0\u582a\0\u5874\0\u58be\0\336\0\u5908\0\u5952\0\u599c"+
    "\0\u59e6\0\u5a30\0\u5a7a\0\u5ac4\0\u5b0e\0\u5b58\0\u5ba2\0\u5bec"+
    "\0\u5c36\0\u5c80\0\u5cca\0\u5d14\0\u5d5e\0\u5da8\0\u5df2\0\u5e3c"+
    "\0\u5e86\0\u0206\0\u5ed0\0\u5f1a\0\u5f1a\0\u5f64\0\u5fae\0\u5ff8"+
    "\0\u6042\0\u608c\0\u60d6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\11\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\11\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\11\1\41\1\11"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\5\13\1\11"+
    "\1\70\1\71\1\72\21\70\1\73\1\70\1\74\63\70"+
    "\1\75\1\76\1\77\22\75\1\4\1\100\63\75\114\0"+
    "\1\6\113\0\1\101\1\102\64\0\1\103\111\0\1\104"+
    "\25\0\13\11\1\0\1\11\4\0\1\11\1\0\27\11"+
    "\24\0\6\11\10\0\1\105\1\106\1\107\1\110\1\0"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\15\0\1\107"+
    "\1\116\10\0\1\114\1\0\1\117\1\110\26\0\1\111"+
    "\2\113\1\106\1\113\1\117\10\0\2\13\1\107\2\0"+
    "\3\13\1\114\1\115\1\116\15\0\1\107\1\116\10\0"+
    "\1\114\1\0\1\117\27\0\5\13\1\117\10\0\2\115"+
    "\3\0\3\115\1\0\1\120\62\0\5\115\24\0\1\121"+
    "\46\0\1\122\47\0\1\123\37\0\1\124\1\0\1\125"+
    "\11\0\1\126\13\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\1\11\1\127\25\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\4\11\1\130\1\11"+
    "\1\131\3\11\1\132\14\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\3\11\1\133\4\11"+
    "\1\134\2\11\1\135\1\136\11\11\1\137\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\4\11"+
    "\1\140\5\11\1\141\1\142\13\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\10\11\1\143"+
    "\16\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\1\144\5\11\1\145\1\146\3\11\1\147"+
    "\13\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\25\11\1\150\1\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\6\11\1\151"+
    "\20\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\7\11\1\152\5\11\1\153\6\11\1\154"+
    "\2\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\10\11\1\155\16\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\2\11\1\156"+
    "\24\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\1\157\7\11\1\160\3\11\1\161\12\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\1\162\3\11\1\163\7\11\1\164\12\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\10\11\1\165\16\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\2\11\1\166\12\11\1\167"+
    "\3\11\1\170\1\171\4\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\1\172\5\11\1\173"+
    "\5\11\1\174\3\11\1\175\6\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\6\11\1\176"+
    "\1\11\1\177\16\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\6\11\1\200\20\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\13\11\1\201\13\11\24\0\6\11\70\0\1\202\1\0"+
    "\1\203\111\0\1\204\111\0\1\205\1\206\110\0\1\207"+
    "\111\0\1\210\5\0\1\211\103\0\1\212\6\0\1\213"+
    "\102\0\1\214\111\0\1\215\17\0\1\70\2\0\21\70"+
    "\1\0\1\70\1\0\63\70\2\0\1\72\107\0\2\216"+
    "\1\0\5\216\1\217\4\216\2\217\1\220\4\216\1\221"+
    "\1\222\1\223\3\216\1\224\1\216\1\225\1\226\10\216"+
    "\1\227\3\216\1\230\31\216\1\217\2\220\1\216\1\220"+
    "\1\216\25\0\1\231\66\0\1\77\107\0\2\232\1\0"+
    "\5\232\1\233\4\232\2\233\1\234\4\232\1\235\1\236"+
    "\1\237\3\232\1\240\1\232\1\241\1\242\10\232\1\243"+
    "\3\232\1\244\31\232\1\233\2\234\1\232\1\234\1\232"+
    "\1\101\1\5\1\6\107\101\5\102\1\245\104\102\10\0"+
    "\1\105\1\106\1\246\2\0\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\15\0\1\246\1\116\10\0\1\114\1\0"+
    "\1\117\27\0\1\111\2\113\1\106\1\113\1\117\10\0"+
    "\2\106\3\0\3\106\1\114\1\115\1\116\16\0\1\116"+
    "\10\0\1\114\1\0\1\117\27\0\5\106\1\117\10\0"+
    "\1\247\1\250\2\0\5\250\1\0\1\250\6\0\2\250"+
    "\3\0\1\250\2\0\1\250\10\0\1\250\1\0\1\250"+
    "\27\0\6\250\10\0\1\251\1\106\1\246\2\0\3\251"+
    "\1\114\1\115\1\116\15\0\1\246\1\116\10\0\1\114"+
    "\1\0\1\117\27\0\3\251\1\106\1\251\1\117\10\0"+
    "\1\113\1\106\1\246\2\0\3\113\1\114\1\115\1\116"+
    "\15\0\1\246\1\116\10\0\1\114\1\0\1\117\27\0"+
    "\3\113\1\106\1\113\1\117\10\0\1\252\1\106\1\246"+
    "\2\0\3\252\1\114\1\115\1\116\15\0\1\246\1\116"+
    "\10\0\1\114\1\0\1\117\27\0\3\252\1\106\1\252"+
    "\1\117\10\0\2\115\3\0\3\115\1\114\1\0\1\116"+
    "\16\0\1\116\10\0\1\114\1\0\1\117\27\0\5\115"+
    "\1\117\10\0\2\253\3\0\3\253\3\0\1\254\4\0"+
    "\1\254\53\0\5\253\17\0\1\255\101\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\2\11\1\256\24\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\10\11\1\257\16\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\6\11\1\260\20\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\3\11\1\261\23\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\1\262\3\11\1\263\22\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\3\11\1\264\23\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\6\11\1\265\20\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\16\11\1\266\10\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\20\11\1\267\6\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\1\270\11\11\1\271\1\11\1\272\12\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\16\11\1\273\10\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\4\11\1\274\22\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\3\11\1\275\23\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\2\11\1\276\1\277\23\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\15\11\1\300\11\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\1\301\26\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\1\302\26\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\10\11\1\303\16\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\15\11"+
    "\1\304\11\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\2\11\1\305\24\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\4\11"+
    "\1\306\22\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\3\11\1\307\23\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\12\11"+
    "\1\310\14\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\10\11\1\311\16\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\3\11"+
    "\1\312\23\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\26\11\1\313\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\7\11\1\314"+
    "\17\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\5\11\1\315\21\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\6\11\1\316"+
    "\11\11\1\317\6\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\1\11\1\320\25\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\3\11\1\321\23\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\11\11\1\322\15\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\2\11\1\323\1\324\1\11\1\325\1\11\1\326\17\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\16\11\1\327\10\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\7\11\1\330\17\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\4\11\1\331\22\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\15\11\1\332\11\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\15\11\1\333\6\11\1\334\2\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\7\11"+
    "\1\335\11\11\1\336\5\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\20\11\1\337\6\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\20\11\1\340\6\11\24\0\6\11\70\0\1\341"+
    "\1\0\1\342\111\0\1\343\27\0\1\220\4\0\3\220"+
    "\64\0\3\220\1\0\1\220\11\0\1\344\4\0\3\344"+
    "\64\0\3\344\1\0\1\344\11\0\1\345\4\0\3\345"+
    "\5\0\1\346\56\0\3\345\1\0\1\345\11\0\1\347"+
    "\4\0\3\347\5\0\1\346\56\0\3\347\1\0\1\347"+
    "\26\0\1\350\111\0\1\351\111\0\1\352\111\0\1\353"+
    "\111\0\1\354\111\0\1\355\111\0\1\356\111\0\1\357"+
    "\64\0\4\102\1\6\1\245\104\102\10\0\1\247\1\250"+
    "\1\360\1\0\5\250\1\0\1\250\6\0\2\250\3\0"+
    "\1\250\1\0\1\360\1\250\10\0\1\250\1\0\1\250"+
    "\27\0\6\250\10\0\2\361\1\360\1\0\5\361\1\0"+
    "\1\361\6\0\2\361\3\0\1\361\1\0\1\360\1\361"+
    "\10\0\1\361\1\0\1\361\27\0\6\361\10\0\1\362"+
    "\1\106\1\246\2\0\3\362\1\114\1\115\1\116\15\0"+
    "\1\246\1\116\10\0\1\114\1\0\1\117\27\0\3\362"+
    "\1\106\1\362\1\117\10\0\1\363\1\106\1\246\2\0"+
    "\3\363\1\114\1\115\1\116\15\0\1\246\1\116\10\0"+
    "\1\114\1\0\1\117\27\0\3\363\1\106\1\363\1\117"+
    "\10\0\2\253\3\0\3\253\1\114\31\0\1\114\1\0"+
    "\1\117\27\0\5\253\1\117\10\0\2\253\3\0\3\253"+
    "\64\0\5\253\106\0\1\364\12\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\3\11\1\365\23\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\1\366"+
    "\26\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\7\11\1\367\17\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\10\11\1\370"+
    "\16\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\3\11\1\371\23\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\14\11\1\372"+
    "\12\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\20\11\1\373\6\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\4\11\1\374"+
    "\22\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\10\11\1\375\16\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\3\11\1\376"+
    "\23\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\15\11\1\377\11\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\10\11\1\u0100"+
    "\16\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\10\11\1\u0101\16\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\6\11\1\u0102"+
    "\20\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\14\11\1\u0103\12\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\10\11\1\u0104"+
    "\16\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\5\11\1\u0105\21\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\2\11\1\u0106"+
    "\1\u0107\23\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\2\11\1\u0108\24\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\4\11"+
    "\1\u0109\22\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\4\11\1\u010a\22\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\17\11"+
    "\1\u010b\7\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\10\11\1\u010c\16\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\20\11"+
    "\1\u010d\6\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\10\11\1\u010e\16\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\6\11"+
    "\1\u010f\20\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\2\11\1\u0110\24\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\20\11"+
    "\1\u0111\6\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\7\11\1\u0112\17\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\11\11"+
    "\1\u0113\15\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\3\11\1\u0114\23\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\25\11"+
    "\1\u0115\1\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\7\11\1\u0116\17\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\10\11"+
    "\1\u0117\16\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\3\11\1\u0118\23\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\10\11"+
    "\1\u0119\16\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\7\11\1\u011a\17\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\20\11"+
    "\1\u011b\6\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\6\11\1\u011c\1\u011d\17\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\2\11\1\u011e\24\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\5\11\1\u011f\21\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\1\u0120\26\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\10\11\1\u0121\16\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\10\11"+
    "\1\u0122\16\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\1\u0123\26\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\23\11\1\u0124"+
    "\3\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\7\11\1\u0125\17\11\24\0\6\11\72\0"+
    "\1\u0126\44\0\1\346\74\0\2\u0127\1\360\1\0\5\u0127"+
    "\1\0\1\u0127\6\0\2\u0127\3\0\1\u0127\1\0\1\360"+
    "\1\u0127\10\0\1\u0127\1\0\1\u0127\27\0\6\u0127\10\0"+
    "\1\u0128\1\106\1\246\2\0\3\u0128\1\114\1\115\1\116"+
    "\15\0\1\246\1\116\10\0\1\114\1\0\1\117\27\0"+
    "\3\u0128\1\106\1\u0128\1\117\10\0\1\u0129\1\106\1\246"+
    "\2\0\3\u0129\1\114\1\115\1\116\15\0\1\246\1\116"+
    "\10\0\1\114\1\0\1\117\27\0\3\u0129\1\106\1\u0129"+
    "\1\117\106\0\1\u012a\11\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\4\11\1\u012b\22\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\11\11\1\u012c"+
    "\15\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\20\11\1\u012d\6\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\5\11\1\u012e"+
    "\21\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\15\11\1\u012f\11\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\3\11\1\u0130"+
    "\23\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\4\11\1\u0131\22\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\5\11\1\u0132"+
    "\21\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\2\11\1\u0133\24\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\23\11\1\u0134"+
    "\3\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\26\11\1\u0135\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\4\11\1\u0136\22\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\13\11\1\u0137\13\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\3\11\1\u0138\23\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\20\11\1\u0139\6\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\2\11\1\u013a\24\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\4\11\1\u013b\22\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\5\11\1\u013c\21\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\15\11\1\u013d\11\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\21\11\1\u013e\5\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\25\11\1\u013f\1\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\1\u0140\26\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\10\11\1\u0141\16\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\1\u0142\26\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\20\11"+
    "\1\u0143\6\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\12\11\1\u0144\14\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\1\u0145"+
    "\26\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\4\11\1\u0146\22\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\14\11\1\u0147"+
    "\12\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\15\11\1\u0148\11\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\4\11\1\u0149"+
    "\22\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\10\11\1\u014a\16\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\10\11\1\u014b"+
    "\16\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\3\11\1\u014c\23\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\7\11\1\u014d"+
    "\17\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\23\11\1\u014e\3\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\3\11\1\u014f"+
    "\23\11\24\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\14\11\1\u0150\12\11\24\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\0\10\11\1\u0151"+
    "\16\11\24\0\6\11\10\0\2\u0152\1\360\1\0\5\u0152"+
    "\1\0\1\u0152\6\0\2\u0152\3\0\1\u0152\1\0\1\360"+
    "\1\u0152\10\0\1\u0152\1\0\1\u0152\27\0\6\u0152\10\0"+
    "\1\u0153\1\106\1\246\2\0\3\u0153\1\114\1\115\1\116"+
    "\15\0\1\246\1\116\10\0\1\114\1\0\1\117\27\0"+
    "\3\u0153\1\106\1\u0153\1\117\10\0\1\u0154\1\106\1\246"+
    "\2\0\3\u0154\1\114\1\115\1\116\15\0\1\246\1\116"+
    "\10\0\1\114\1\0\1\117\27\0\3\u0154\1\106\1\u0154"+
    "\1\117\105\0\1\u0155\12\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\0\1\u0156\26\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\5\11\1\u0157\21\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\3\11\1\u0158\23\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\2\11\1\u0159\24\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\13\11\1\u015a\13\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\20\11\1\u015b\6\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\10\11\1\u015c\16\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\2\11\1\u015d\24\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\15\11\1\u015e\11\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\15\11\1\u015f\11\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\20\11\1\u0160\6\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\13\11\1\u0161\13\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\23\11\1\u0162\3\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\10\11\1\u0163\16\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\17\11\1\u0164\7\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\5\11\1\u0165\21\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\3\11\1\u0166\23\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\5\11\1\u0167\21\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\15\11\1\u0168\11\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\21\11\1\u0169\5\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\23\11\1\u016a\3\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\10\11\1\u016b\16\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\3\11\1\u016c\23\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\22\11\1\u016d\4\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\20\11\1\u016e\6\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\7\11\1\u016f\17\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\10\11\1\u0170\16\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\7\11\1\u0171\17\11"+
    "\24\0\6\11\10\0\2\u0172\1\360\1\0\5\u0172\1\0"+
    "\1\u0172\6\0\2\u0172\3\0\1\u0172\1\0\1\360\1\u0172"+
    "\10\0\1\u0172\1\0\1\u0172\27\0\6\u0172\10\0\1\u0173"+
    "\1\106\1\246\2\0\3\u0173\1\114\1\115\1\116\15\0"+
    "\1\246\1\116\10\0\1\114\1\0\1\117\27\0\3\u0173"+
    "\1\106\1\u0173\1\117\10\0\1\u0174\1\106\1\246\2\0"+
    "\3\u0174\1\114\1\115\1\116\15\0\1\246\1\116\10\0"+
    "\1\114\1\0\1\117\27\0\3\u0174\1\106\1\u0174\1\117"+
    "\107\0\1\u0175\10\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\5\11\1\u0176\21\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\3\11\1\u0177\23\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\10\11\1\u0178\16\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\21\11\1\u0179\5\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\14\11\1\u017a\12\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\23\11\1\u017b\3\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\2\11\1\u017c\24\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\10\11\1\u017d\16\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\3\11\1\u017e\23\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\10\11\1\u017f\16\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\5\11\1\u0180\21\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\1\u0181\26\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\10\11\1\u0182\16\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\10\11\1\u0183\16\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\6\11\1\u0184\20\11\24\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\12\11\1\u0185\14\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\3\11\1\u0186\23\11\24\0\6\11\10\0\2\u0187\1\360"+
    "\1\0\5\u0187\1\0\1\u0187\6\0\2\u0187\3\0\1\u0187"+
    "\1\0\1\360\1\u0187\10\0\1\u0187\1\0\1\u0187\27\0"+
    "\6\u0187\10\0\1\u0188\1\106\1\246\2\0\3\u0188\1\114"+
    "\1\115\1\116\15\0\1\246\1\116\10\0\1\114\1\0"+
    "\1\117\27\0\3\u0188\1\106\1\u0188\1\117\10\0\1\u0189"+
    "\1\106\1\246\2\0\3\u0189\1\114\1\115\1\116\15\0"+
    "\1\246\1\116\10\0\1\114\1\0\1\117\27\0\3\u0189"+
    "\1\106\1\u0189\1\117\15\0\1\u018a\102\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\0\3\11\1\u018b\23\11\24\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\1\11\1\0"+
    "\1\u018c\26\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\15\11\1\u018d\11\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\10\11"+
    "\1\u018e\16\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\10\11\1\u018f\16\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\10\11"+
    "\1\u0190\16\11\24\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\10\11\1\u0191\16\11\24\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\5\11"+
    "\1\u0192\21\11\24\0\6\11\3\0\1\u0193\2\0\13\11"+
    "\1\0\1\11\1\0\1\u0194\2\0\1\11\1\0\27\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\15\11\1\u0195\11\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\15\11\1\u0196\11\11"+
    "\24\0\6\11\10\0\2\u0197\1\360\1\0\5\u0197\1\0"+
    "\1\u0197\6\0\2\u0197\3\0\1\u0197\1\0\1\360\1\u0197"+
    "\10\0\1\u0197\1\0\1\u0197\27\0\6\u0197\10\0\1\u0198"+
    "\1\106\1\246\2\0\3\u0198\1\114\1\115\1\116\15\0"+
    "\1\246\1\116\10\0\1\114\1\0\1\117\27\0\3\u0198"+
    "\1\106\1\u0198\1\117\10\0\1\u0199\1\106\1\246\2\0"+
    "\3\u0199\1\114\1\115\1\116\15\0\1\246\1\116\10\0"+
    "\1\114\1\0\1\117\27\0\3\u0199\1\106\1\u0199\1\117"+
    "\110\0\1\u019a\7\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\15\11\1\u019b\11\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\3\11\1\u019c\23\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\23\11\1\u019d\3\11\24\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\6\11\1\u019e\20\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\10\11\1\u019f\16\11\24\0\6\11\3\0\1\u0193"+
    "\20\0\1\u0194\71\0\1\u01a0\3\0\13\u01a0\4\0\31\u01a0"+
    "\24\0\6\u01a0\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\3\11\1\u01a1\23\11\24\0\6\11\10\0\2\u01a2"+
    "\1\360\1\0\5\u01a2\1\0\1\u01a2\6\0\2\u01a2\3\0"+
    "\1\u01a2\1\0\1\360\1\u01a2\10\0\1\u01a2\1\0\1\u01a2"+
    "\27\0\6\u01a2\10\0\1\u01a3\1\106\1\246\2\0\3\u01a3"+
    "\1\114\1\115\1\116\15\0\1\246\1\116\10\0\1\114"+
    "\1\0\1\117\27\0\3\u01a3\1\106\1\u01a3\1\117\10\0"+
    "\1\u01a4\1\106\1\246\2\0\3\u01a4\1\114\1\115\1\116"+
    "\15\0\1\246\1\116\10\0\1\114\1\0\1\117\27\0"+
    "\3\u01a4\1\106\1\u01a4\1\117\105\0\1\u01a5\12\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\5\11\1\u01a6\21\11"+
    "\24\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\21\11\1\u01a7\5\11\24\0\6\11\4\0\1\u01a0"+
    "\3\0\13\u01a0\1\0\1\u01a8\2\0\31\u01a0\24\0\6\u01a0"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\2\11"+
    "\1\u01a9\24\11\24\0\6\11\10\0\2\u01aa\1\360\1\0"+
    "\5\u01aa\1\0\1\u01aa\6\0\2\u01aa\3\0\1\u01aa\1\0"+
    "\1\360\1\u01aa\10\0\1\u01aa\1\0\1\u01aa\27\0\6\u01aa"+
    "\10\0\1\u01ab\1\106\1\246\2\0\3\u01ab\1\114\1\115"+
    "\1\116\15\0\1\246\1\116\10\0\1\114\1\0\1\117"+
    "\27\0\3\u01ab\1\106\1\u01ab\1\117\10\0\1\u01ac\1\106"+
    "\1\246\2\0\3\u01ac\1\114\1\115\1\116\15\0\1\246"+
    "\1\116\10\0\1\114\1\0\1\117\27\0\3\u01ac\1\106"+
    "\1\u01ac\1\117\107\0\1\u01ad\10\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\10\11\1\u01ae\16\11\24\0\6\11"+
    "\10\0\2\u01af\1\360\1\0\5\u01af\1\0\1\u01af\6\0"+
    "\2\u01af\3\0\1\u01af\1\0\1\360\1\u01af\10\0\1\u01af"+
    "\1\0\1\u01af\27\0\6\u01af\10\0\1\u01b0\1\106\1\246"+
    "\2\0\3\u01b0\1\114\1\115\1\116\15\0\1\246\1\116"+
    "\10\0\1\114\1\0\1\117\27\0\3\u01b0\1\106\1\u01b0"+
    "\1\117\10\0\1\u01b1\1\106\1\246\2\0\3\u01b1\1\114"+
    "\1\115\1\116\15\0\1\246\1\116\10\0\1\114\1\0"+
    "\1\117\27\0\3\u01b1\1\106\1\u01b1\1\117\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\7\11\1\u01b2\17\11"+
    "\24\0\6\11\10\0\2\u01b3\1\360\1\0\5\u01b3\1\0"+
    "\1\u01b3\6\0\2\u01b3\3\0\1\u01b3\1\0\1\360\1\u01b3"+
    "\10\0\1\u01b3\1\0\1\u01b3\27\0\6\u01b3\10\0\1\u01b4"+
    "\1\106\1\246\2\0\3\u01b4\1\114\1\115\1\116\15\0"+
    "\1\246\1\116\10\0\1\114\1\0\1\117\27\0\3\u01b4"+
    "\1\106\1\u01b4\1\117\10\0\1\u01b5\1\106\1\246\2\0"+
    "\3\u01b5\1\114\1\115\1\116\15\0\1\246\1\116\10\0"+
    "\1\114\1\0\1\117\27\0\3\u01b5\1\106\1\u01b5\1\117"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\0\20\11"+
    "\1\u01b6\6\11\24\0\6\11\10\0\2\u01b7\1\360\1\0"+
    "\5\u01b7\1\0\1\u01b7\6\0\2\u01b7\3\0\1\u01b7\1\0"+
    "\1\360\1\u01b7\10\0\1\u01b7\1\0\1\u01b7\27\0\6\u01b7"+
    "\10\0\1\u01b8\1\106\1\246\2\0\3\u01b8\1\114\1\115"+
    "\1\116\15\0\1\246\1\116\10\0\1\114\1\0\1\117"+
    "\27\0\3\u01b8\1\106\1\u01b8\1\117\10\0\1\u01b9\1\106"+
    "\1\246\2\0\3\u01b9\1\114\1\115\1\116\15\0\1\246"+
    "\1\116\10\0\1\114\1\0\1\117\27\0\3\u01b9\1\106"+
    "\1\u01b9\1\117\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\0\22\11\1\u01ba\4\11\24\0\6\11\10\0\2\u01bb"+
    "\1\360\1\0\5\u01bb\1\0\1\u01bb\6\0\2\u01bb\3\0"+
    "\1\u01bb\1\0\1\360\1\u01bb\10\0\1\u01bb\1\0\1\u01bb"+
    "\27\0\6\u01bb\10\0\1\u01bc\1\106\1\246\2\0\3\u01bc"+
    "\1\114\1\115\1\116\15\0\1\246\1\116\10\0\1\114"+
    "\1\0\1\117\27\0\3\u01bc\1\106\1\u01bc\1\117\10\0"+
    "\1\u01bd\1\106\1\246\2\0\3\u01bd\1\114\1\115\1\116"+
    "\15\0\1\246\1\116\10\0\1\114\1\0\1\117\27\0"+
    "\3\u01bd\1\106\1\u01bd\1\117\6\0\13\11\1\0\1\11"+
    "\4\0\1\11\1\0\20\11\1\u01be\6\11\24\0\6\11"+
    "\10\0\2\u01bf\1\360\1\0\5\u01bf\1\0\1\u01bf\6\0"+
    "\2\u01bf\3\0\1\u01bf\1\0\1\360\1\u01bf\10\0\1\u01bf"+
    "\1\0\1\u01bf\27\0\6\u01bf\10\0\1\u01c0\1\106\1\246"+
    "\2\0\3\u01c0\1\114\1\115\1\116\15\0\1\246\1\116"+
    "\10\0\1\114\1\0\1\117\27\0\3\u01c0\1\106\1\u01c0"+
    "\1\117\10\0\1\u01c1\1\106\1\246\2\0\3\u01c1\1\114"+
    "\1\115\1\116\15\0\1\246\1\116\10\0\1\114\1\0"+
    "\1\117\27\0\3\u01c1\1\106\1\u01c1\1\117\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\0\3\11\1\u01c2\23\11"+
    "\24\0\6\11\10\0\2\u01c3\1\360\1\0\5\u01c3\1\0"+
    "\1\u01c3\6\0\2\u01c3\3\0\1\u01c3\1\0\1\360\1\u01c3"+
    "\10\0\1\u01c3\1\0\1\u01c3\27\0\6\u01c3\10\0\1\u01c4"+
    "\1\106\1\246\2\0\3\u01c4\1\114\1\115\1\116\15\0"+
    "\1\246\1\116\10\0\1\114\1\0\1\117\27\0\3\u01c4"+
    "\1\106\1\u01c4\1\117\10\0\1\u01c5\1\106\1\246\2\0"+
    "\3\u01c5\1\114\1\115\1\116\15\0\1\246\1\116\10\0"+
    "\1\114\1\0\1\117\27\0\3\u01c5\1\106\1\u01c5\1\117"+
    "\10\0\2\u01c6\1\360\1\0\5\u01c6\1\0\1\u01c6\6\0"+
    "\2\u01c6\3\0\1\u01c6\1\0\1\360\1\u01c6\10\0\1\u01c6"+
    "\1\0\1\u01c6\27\0\6\u01c6\10\0\1\u01c7\1\106\1\246"+
    "\2\0\3\u01c7\1\114\1\115\1\116\15\0\1\246\1\116"+
    "\10\0\1\114\1\0\1\117\27\0\3\u01c7\1\106\1\u01c7"+
    "\1\117\12\0\1\360\25\0\1\360\61\0\1\u01c8\1\106"+
    "\1\246\2\0\3\u01c8\1\114\1\115\1\116\15\0\1\246"+
    "\1\116\10\0\1\114\1\0\1\117\27\0\3\u01c8\1\106"+
    "\1\u01c8\1\117\10\0\1\u01c9\1\106\1\246\2\0\3\u01c9"+
    "\1\114\1\115\1\116\15\0\1\246\1\116\10\0\1\114"+
    "\1\0\1\117\27\0\3\u01c9\1\106\1\u01c9\1\117\10\0"+
    "\1\u01ca\1\106\1\246\2\0\3\u01ca\1\114\1\115\1\116"+
    "\15\0\1\246\1\116\10\0\1\114\1\0\1\117\27\0"+
    "\3\u01ca\1\106\1\u01ca\1\117\10\0\1\u01cb\1\106\1\246"+
    "\2\0\3\u01cb\1\114\1\115\1\116\15\0\1\246\1\116"+
    "\10\0\1\114\1\0\1\117\27\0\3\u01cb\1\106\1\u01cb"+
    "\1\117\10\0\2\106\1\246\2\0\3\106\1\114\1\115"+
    "\1\116\15\0\1\246\1\116\10\0\1\114\1\0\1\117"+
    "\27\0\5\106\1\117";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24864];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\24\1\10\11"+
    "\1\1\1\11\3\1\3\11\6\1\2\11\3\1\1\11"+
    "\2\1\1\0\2\11\2\1\1\11\1\0\3\1\1\11"+
    "\1\1\1\0\7\11\1\0\54\1\3\11\1\1\10\11"+
    "\2\1\12\11\12\1\1\0\1\11\5\1\2\0\64\1"+
    "\3\11\1\0\1\11\1\0\11\11\3\1\1\0\61\1"+
    "\1\11\3\1\1\0\52\1\1\0\37\1\1\0\24\1"+
    "\1\0\10\1\2\0\5\1\1\0\5\1\1\0\4\1"+
    "\1\0\2\1\1\11\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[459];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private SourceReader zzReader;

  /** the current state of the DFA */
  private int zzState;
  

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  
  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** the stack of open (nested) input streams to read from */
  private java.util.Stack zzStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    SourceReader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    int yycolumn;
    int yychar;
    char [] zzBuffer;
    boolean zzAtEOF;
    boolean zzEOFDone;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(SourceReader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, 
                  char [] zzBuffer, boolean zzAtEOF, int yyline, int yycolumn, int yychar) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
      this.yychar		 = yychar;
    }
  }

  /* user code: */
  StringBuffer string = new StringBuffer();
  
  protected int curFile;
  protected InclusionType curInclusionType;
  
  private Symbol processInclude(InclusionType inclusionType, boolean isImport){
  	if(curInclusionType == InclusionType.NATIVE){
  		inclusionType = InclusionType.NATIVE;
  	}
  	int includeToken;
  	String s;
  	if(isImport){
		includeToken = IMPORT_START; 	
		s = yytext();
  	} else {
  		s = null;
  		includeToken = INCLUDE_START;
  	}
  	SourceReader ar = this.zzReader.getSourceEnvironment().getReaderFromInclude(yytext(), yychar|curFile, (yylength()+yychar)|curFile,inclusionType,isImport);
  	if(ar == null) return null;
  	yypushStream(ar);
  	return symbol(includeToken,new SourceFileInfo(curFile,inclusionType,s));
  }

  
  private Symbol symbol(int type) {
    return new Symbol(type, yychar|curFile, (yylength()+yychar)|curFile);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yychar|curFile, (yylength()+yychar)|curFile, value);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GalaxyScanner(java.io.Reader in) {
  curFile = ((SourceReader)in).getFileId();
curInclusionType = ((SourceReader)in).getInclusionType();
this.zzReader = (SourceReader)in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GalaxyScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1792) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }
    
    // numRead < 0) 
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(SourceReader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn, yychar)
    );
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
	curFile = reader.getFileId();
	curInclusionType = reader.getInclusionType();
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yycolumn = yychar = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
	curFile = s.zzReader.getFileId();
	curInclusionType = s.zzReader.getInclusionType();
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos ;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
    yychar  	   = s.yychar;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(SourceReader reader) {
    zzReader = reader;
	curFile = reader.getFileId();
	curInclusionType = reader.getInclusionType();
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 57: 
          { return symbol(NOTEQ);
          }
        case 150: break;
        case 141: 
          { return symbol(FUNCTION);
          }
        case 151: break;
        case 128: 
          { return symbol(PUBLIC);
          }
        case 152: break;
        case 126: 
          { return symbol(ENRICH);
          }
        case 153: break;
        case 28: 
          { return symbol(AND);
          }
        case 154: break;
        case 6: 
          { return symbol(INTEGER_LITERAL, new Integer(yytext()));
          }
        case 155: break;
        case 34: 
          { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
          }
        case 156: break;
        case 29: 
          { return symbol(OR);
          }
        case 157: break;
        case 19: 
          { return symbol(COMMA);
          }
        case 158: break;
        case 148: 
          { return symbol(INTEGER_LITERAL, new Integer(Integer.MIN_VALUE));
          }
        case 159: break;
        case 43: 
          { return symbol(DOTDOT);
          }
        case 160: break;
        case 32: 
          { string.append( yytext() );
          }
        case 161: break;
        case 5: 
          { return symbol(IDENTIFIER, yytext());
          }
        case 162: break;
        case 94: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\n'));
          }
        case 163: break;
        case 149: 
          { return symbol(SETINSTANCELIMIT);
          }
        case 164: break;
        case 16: 
          { return symbol(LBRACK);
          }
        case 165: break;
        case 119: 
          { return symbol(FIXED);
          }
        case 166: break;
        case 36: 
          { return symbol(DIVEQ);
          }
        case 167: break;
        case 89: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\''));
          }
        case 168: break;
        case 25: 
          { return symbol(COMP);
          }
        case 169: break;
        case 60: 
          { return symbol(OREQ);
          }
        case 170: break;
        case 14: 
          { return symbol(LBRACE);
          }
        case 171: break;
        case 1: 
          { throw Problem.ofType(ProblemId.SYNTAX_ILLEGAL_CHARACTER).at(curFile+yychar,curFile+yychar+yylength())
			        	  			.details(yytext())
			        	  			.raiseUnrecoverable();
          }
        case 172: break;
        case 27: 
          { return symbol(COLON);
          }
        case 173: break;
        case 130: 
          { return symbol(IMPORT);
          }
        case 174: break;
        case 98: 
          { return symbol(BYTE);
          }
        case 175: break;
        case 90: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\\'));
          }
        case 176: break;
        case 51: 
          { return symbol(DO);
          }
        case 177: break;
        case 127: 
          { return symbol(NATIVE);
          }
        case 178: break;
        case 45: 
          { return symbol(PLUSEQ);
          }
        case 179: break;
        case 49: 
          { return symbol(IS);
          }
        case 180: break;
        case 85: 
          { return symbol(RSHIFTEQ);
          }
        case 181: break;
        case 42: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 182: break;
        case 81: 
          { return symbol(GET);
          }
        case 183: break;
        case 145: 
          { return symbol(INSTANCEOF);
          }
        case 184: break;
        case 7: 
          { return symbol(DOT);
          }
        case 185: break;
        case 102: 
          { return symbol(LONG);
          }
        case 186: break;
        case 62: 
          { return symbol(XOREQ);
          }
        case 187: break;
        case 137: 
          { return symbol(DEFAULT);
          }
        case 188: break;
        case 20: 
          { return symbol(GT);
          }
        case 189: break;
        case 106: 
          { return symbol(VOID);
          }
        case 190: break;
        case 76: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(0, yylength()-1, 8)));
          }
        case 191: break;
        case 84: 
          { return symbol(URSHIFT);
          }
        case 192: break;
        case 143: 
          { return symbol(PROTECTED);
          }
        case 193: break;
        case 40: 
          { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
          }
        case 194: break;
        case 10: 
          { yybegin(CHARLITERAL);
          }
        case 195: break;
        case 95: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\f'));
          }
        case 196: break;
        case 23: 
          { return symbol(LT);
          }
        case 197: break;
        case 2: 
          { /* ignore */
          }
        case 198: break;
        case 13: 
          { return symbol(RPAREN);
          }
        case 199: break;
        case 22: 
          { return symbol(EQ);
          }
        case 200: break;
        case 144: 
          { return symbol(INTERFACE);
          }
        case 201: break;
        case 103: 
          { return symbol(ELSE);
          }
        case 202: break;
        case 104: 
          { return symbol(USES);
          }
        case 203: break;
        case 92: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\t'));
          }
        case 204: break;
        case 113: 
          { return symbol(CONST);
          }
        case 205: break;
        case 97: 
          { return symbol(BOOLEAN);
          }
        case 206: break;
        case 41: 
          { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
          }
        case 207: break;
        case 71: 
          { string.append( '\r' );
          }
        case 208: break;
        case 24: 
          { return symbol(NOT);
          }
        case 209: break;
        case 46: 
          { return symbol(MINUSMINUS);
          }
        case 210: break;
        case 121: 
          { return symbol(STATIC);
          }
        case 211: break;
        case 135: 
          { return symbol(PRIVATE);
          }
        case 212: break;
        case 125: 
          { return symbol(RETURN);
          }
        case 213: break;
        case 107: 
          { return symbol(URSHIFTEQ);
          }
        case 214: break;
        case 146: 
          { Symbol s = processInclude(InclusionType.INCLUDE,false);
  							 if(s != null) return s;
          }
        case 215: break;
        case 108: 
          { return symbol(BREAK);
          }
        case 216: break;
        case 91: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\b'));
          }
        case 217: break;
        case 101: 
          { return symbol(CHAR);
          }
        case 218: break;
        case 77: 
          { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));
          }
        case 219: break;
        case 138: 
          { return symbol(ABSTRACT);
          }
        case 220: break;
        case 37: 
          { return symbol(MULTEQ);
          }
        case 221: break;
        case 63: 
          { return symbol(MODEQ);
          }
        case 222: break;
        case 53: 
          { return symbol(GTEQ);
          }
        case 223: break;
        case 58: 
          { return symbol(ANDEQ);
          }
        case 224: break;
        case 88: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\"'));
          }
        case 225: break;
        case 142: 
          { return symbol(TRANSIENT);
          }
        case 226: break;
        case 8: 
          { return symbol(PLUS);
          }
        case 227: break;
        case 72: 
          { string.append( '\n' );
          }
        case 228: break;
        case 65: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
          }
        case 229: break;
        case 67: 
          { string.append( '\'' );
          }
        case 230: break;
        case 12: 
          { return symbol(LPAREN);
          }
        case 231: break;
        case 11: 
          { return symbol(MINUS);
          }
        case 232: break;
        case 86: 
          { return symbol(LSHIFTEQ);
          }
        case 233: break;
        case 122: 
          { return symbol(STRUCT);
          }
        case 234: break;
        case 129: 
          { return symbol(INLINE);
          }
        case 235: break;
        case 123: 
          { return symbol(SWITCH);
          }
        case 236: break;
        case 116: 
          { return symbol(ISKEY);
          }
        case 237: break;
        case 75: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 238: break;
        case 82: 
          { return symbol(INT);
          }
        case 239: break;
        case 68: 
          { string.append( '\\' );
          }
        case 240: break;
        case 30: 
          { return symbol(XOR);
          }
        case 241: break;
        case 124: 
          { return symbol(THROWS);
          }
        case 242: break;
        case 87: 
          { yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbol(CHARACTER_LITERAL, new Character((char)val));
          }
        case 243: break;
        case 9: 
          { yybegin(STRING); string.setLength(0);
          }
        case 244: break;
        case 35: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 245: break;
        case 111: 
          { return symbol(THROW);
          }
        case 246: break;
        case 44: 
          { return symbol(PLUSPLUS);
          }
        case 247: break;
        case 120: 
          { return symbol(WHILE);
          }
        case 248: break;
        case 83: 
          { return symbol(FOR);
          }
        case 249: break;
        case 132: 
          { return symbol(TYPEDEF);
          }
        case 250: break;
        case 33: 
          { throw Problem.ofType(ProblemId.SYNTAX_UNTERMINATED_STRING).at(curFile+yychar-string.length()-1,curFile+yychar)
									  	  			.raiseUnrecoverable();
          }
        case 251: break;
        case 18: 
          { return symbol(SEMICOLON);
          }
        case 252: break;
        case 47: 
          { return symbol(ARROW);
          }
        case 253: break;
        case 80: 
          { return symbol(NEW);
          }
        case 254: break;
        case 112: 
          { return symbol(CATCH);
          }
        case 255: break;
        case 52: 
          { return symbol(RSHIFT);
          }
        case 256: break;
        case 131: 
          { return symbol(DELETE);
          }
        case 257: break;
        case 4: 
          { return symbol(MULT);
          }
        case 258: break;
        case 109: 
          { return symbol(SHORT);
          }
        case 259: break;
        case 61: 
          { return symbol(OROR);
          }
        case 260: break;
        case 73: 
          { string.append( '\f' );
          }
        case 261: break;
        case 55: 
          { return symbol(LTEQ);
          }
        case 262: break;
        case 140: 
          { return symbol(OVERRIDE);
          }
        case 263: break;
        case 114: 
          { return symbol(CLASS);
          }
        case 264: break;
        case 133: 
          { return symbol(EXTENDS);
          }
        case 265: break;
        case 115: 
          { return symbol(KEYOF);
          }
        case 266: break;
        case 50: 
          { return symbol(IF);
          }
        case 267: break;
        case 105: 
          { return symbol(NULL_LITERAL);
          }
        case 268: break;
        case 54: 
          { return symbol(EQEQ);
          }
        case 269: break;
        case 79: 
          { return symbol(TRY);
          }
        case 270: break;
        case 59: 
          { return symbol(ANDAND);
          }
        case 271: break;
        case 78: 
          { return symbol(SET);
          }
        case 272: break;
        case 70: 
          { string.append( '\t' );
          }
        case 273: break;
        case 31: 
          { return symbol(MOD);
          }
        case 274: break;
        case 134: 
          { return symbol(PACKAGE);
          }
        case 275: break;
        case 99: 
          { return symbol(BOOLEAN_LITERAL, new Boolean(true));
          }
        case 276: break;
        case 96: 
          { return symbol(INTEGER_LITERAL, new Long(parseLong(2, yylength()-1, 16)));
          }
        case 277: break;
        case 64: 
          { throw Problem.ofType(ProblemId.SYNTAX_ILLEGAL_ESCAPE_SEQUENCE).at(curFile+yychar,curFile+yychar+yylength())
				        	  				.details(yytext())
				        	  				.raiseUnrecoverable();
          }
        case 278: break;
        case 17: 
          { return symbol(RBRACK);
          }
        case 279: break;
        case 147: 
          { return symbol(IMPLEMENTS);
          }
        case 280: break;
        case 136: 
          { return symbol(FINALLY);
          }
        case 281: break;
        case 69: 
          { string.append( '\b' );
          }
        case 282: break;
        case 3: 
          { return symbol(DIV);
          }
        case 283: break;
        case 38: 
          { return symbol(INTEGER_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));
          }
        case 284: break;
        case 56: 
          { return symbol(LSHIFT);
          }
        case 285: break;
        case 15: 
          { return symbol(RBRACE);
          }
        case 286: break;
        case 39: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 287: break;
        case 139: 
          { return symbol(CONTINUE);
          }
        case 288: break;
        case 93: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character('\r'));
          }
        case 289: break;
        case 48: 
          { return symbol(MINUSEQ);
          }
        case 290: break;
        case 21: 
          { return symbol(AT);
          }
        case 291: break;
        case 100: 
          { return symbol(CASE);
          }
        case 292: break;
        case 66: 
          { string.append( '\"' );
          }
        case 293: break;
        case 74: 
          { yybegin(YYINITIAL); return symbol(CHARACTER_LITERAL, new Character(yytext().charAt(0)));
          }
        case 294: break;
        case 118: 
          { return symbol(FINAL);
          }
        case 295: break;
        case 26: 
          { return symbol(QUESTION);
          }
        case 296: break;
        case 110: 
          { return symbol(SUPER);
          }
        case 297: break;
        case 117: 
          { return symbol(BOOLEAN_LITERAL, new Boolean(false));
          }
        case 298: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              if (yymoreStreams()){ yypopStream(); return symbol(INCLUDE_END);}else return symbol(EOF);
            }
            case 460: break;
            default:
              {
                return symbol(EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
