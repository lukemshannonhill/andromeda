<project name="Build Parser" default="compile" basedir="..">
  <property name="langPath" location="data/lang"/>
 	<property name="src-main" location="src/main" />
	<property name="src-gui" location="src/gui" />
	<property name="src-gen" location="src/gen" />
	<property name="src-ext" location="src/ext" />
	<property name="src-mopaq" location="../MoPaQLib/src" />
  <property name="srcOut" location="src/gen"/>
  <property name="classOut" location="bin"/>
  <property name="dist" location="dist"/>
  <property name="lib" location="lib/build"/>
  <property name="build-bin" location="build/build-bin"/>
  <property environment="env"/>

	<!--
  <path id="binaries">
    <pathelement location="${bin}"/>
    <fileset dir="${bin}">
      <include name="**/*.jar"/>
      <include name="**/*.zip"/>
    </fileset> 
    <fileset dir="lib" includes="**/*.jar"/>
    <pathelement path="${java.class.path}"/>
    <pathelement path="${build-bin}"/>
  </path>
	-->
  <path id="buildLibPath">
    <pathelement location="${lib}"/>
    <fileset dir="${lib}">
      <include name="**/*.jar"/>
      <include name="**/*.zip"/>
    </fileset>
    <fileset dir="lib" includes="**/*.jar"/>
    <pathelement path="${build-bin}"/>
    <pathelement path="${java.class.path}"/>
  </path>

  <taskdef name="jflex" classname="JFlex.anttask.JFlexTask" classpathref="buildLibPath"/>
  <taskdef name="classgen" classname="classgen.AntTask" classpath="${lib}/classgen-gex.jar"/>
  <taskdef name="cup" classname="java_cup.anttask.CUPTask" classpath="${lib}/java-cup-gex.jar" />
  <taskdef name="cupOld" classname="java_cup.anttask.CUPTask" classpathref="buildLibPath"/>
  <taskdef name="gexEnrich" classname="com.sc2mod.compilerGen.ClassEnricherAntTask" classpathref="buildLibPath"/>

  <target name="init">
    <mkdir dir="${classOut}"/>
    <mkdir dir="${srcOut}"/>
  </target>

  <target name="classgen" depends="init">
    <classgen file="${langPath}/andromeda.cl" destdir="${srcOut}" visitor="true"/>
  </target>
	
  <target name="enrich" depends="classgen">
    <gexEnrich path="${srcOut}/com/sc2mod/andromeda/syntaxNodes" scanner="${srcOut}/com/sc2mod/andromeda/parser/AndromedaScanner.java"/>
  	<gexEnrich scanner="${srcOut}/com/sc2mod/andromeda/parser/GalaxyScanner.java"/>
  </target>

  <target name="cup" depends="classgen">
  	 <cup srcfile="${langPath}/andromeda.cup" destdir="${srcOut}" interface="true" parser="AndromedaGenParser"/>
 	 <cup srcfile="${langPath}/galaxy.cup" destdir="${srcOut}" interface="true" parser="GalaxyGenParser"/>
  </target>

  <target name="jflex" depends="cup">
  	<jflex file="${langPath}/unicode.flex" destdir="${srcOut}"/>
    <jflex file="${langPath}/andromeda.flex" destdir="${srcOut}" skeleton="${langPath}/skeleton/flex/skeleton.nested"/>
    <jflex file="${langPath}/galaxy.flex" destdir="${srcOut}" skeleton="${langPath}/skeleton/flex/skeleton.nested"/>
  </target>

  <target name="copy_src" depends="jflex,classgen,enrich">
  <delete file="${srcOut}/com/sc2mod/andromeda/syntaxNodes/SyntaxNode.java"/>
   <copy todir="${srcOut}">
     <fileset dir="${langPath}/skeleton/java" includes="**/**.java"/>
   </copy>
  </target>

  <target name="compile" depends="copy_src">
	<javac destdir="${classOut}">
		<classpath refid="buildLibPath" />
		<src path="${src-main}" />
		<src path="${src-gen}" />
		<src path="${src-mopaq}" />
		<src path="${src-gui}" />
		<src path="${src-ext}" />
	</javac>
  </target>
  <target name="clean">
    <delete dir="${srcOut}"/>
    <delete dir="${classOut}"/>
  </target>
<!-- we do not need to make a jar here!!
  <target name="dist" depends="compile">
    <jar jarfile="${dist}/Compiler.jar" basedir="${classes}">
     <manifest>
       <attribute name="Main-Class" value="Parser"/>
       <attribute name="Class-Path" value="java-cup-10k-b2-runtime-TUM.jar"/>
     </manifest>
    </jar>
  </target>


  <target name="run" depends="dist">
    <java classname="Parser" fork="true">
      <arg value="input.test"/>
      <classpath refid="binaries"/>
    </java>
  </target>
  -->

</project>